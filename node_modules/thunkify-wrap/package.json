{
  "_args": [
    [
      {
        "raw": "thunkify-wrap@~1.0.4",
        "scope": null,
        "escapedName": "thunkify-wrap",
        "name": "thunkify-wrap",
        "rawSpec": "~1.0.4",
        "spec": ">=1.0.4 <1.1.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\co-fs-extra"
    ]
  ],
  "_from": "thunkify-wrap@>=1.0.4 <1.1.0",
  "_id": "thunkify-wrap@1.0.4",
  "_inCache": true,
  "_location": "/thunkify-wrap",
  "_npmUser": {
    "name": "dead_horse",
    "email": "dead_horse@qq.com"
  },
  "_npmVersion": "2.0.0-beta.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "thunkify-wrap@~1.0.4",
    "scope": null,
    "escapedName": "thunkify-wrap",
    "name": "thunkify-wrap",
    "rawSpec": "~1.0.4",
    "spec": ">=1.0.4 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/co-fs-extra"
  ],
  "_resolved": "https://registry.npmjs.org/thunkify-wrap/-/thunkify-wrap-1.0.4.tgz",
  "_shasum": "b52be548ddfefda20e00b58c6096762b43dd6880",
  "_shrinkwrap": null,
  "_spec": "thunkify-wrap@~1.0.4",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\co-fs-extra",
  "bugs": {
    "url": "https://github.com/dead-horse/node-thunkify-wrap/issues"
  },
  "dependencies": {
    "enable": "1"
  },
  "description": "Turn callbacks, arrays, generators, generator functions, and promises into a thunk",
  "devDependencies": {
    "co": "*",
    "co-mocha": "*",
    "mocha": "*",
    "should": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "b52be548ddfefda20e00b58c6096762b43dd6880",
    "tarball": "https://registry.npmjs.org/thunkify-wrap/-/thunkify-wrap-1.0.4.tgz"
  },
  "gitHead": "0f707c8ab518578ae48c04c8e940c34c3e7851d0",
  "homepage": "https://github.com/dead-horse/node-thunkify-wrap#readme",
  "keywords": [
    "thunk",
    "co",
    "generator",
    "generators",
    "promise"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    }
  ],
  "name": "thunkify-wrap",
  "optionalDependencies": {},
  "readme": "\n# thunkify-wrap [![Build Status](https://secure.travis-ci.org/node-modules/node-thunkify-wrap.svg)](http://travis-ci.org/node-modules/node-thunkify-wrap)\n\n  Turn each node function in an object return a thunk.\n  Turn a regular node function into one which returns a thunk,\n  useful for generator-based flow control such as [co](https://github.com/visionmedia/co).\n\n## Installation\n\n[![NPM](https://nodei.co/npm/thunkify-wrap.svg?downloads=true)](https://nodei.co/npm/thunkify-wrap/)\n\n## Example\n\n```js\n// the same as thunkify\nvar thunkify = require('thunkify-wrap');\nvar fs = require('fs');\n\nfs.readFile = thunkify(fs.readFile);\n\nfs.readFile('package.json', 'utf8')(function(err, str){\n\n});\n\n// thunkfiy an object\nvar user = {\n  add: function () {},\n  show: function () {},\n  list: function () {}\n}\n\nmodule.exports = thunkify(user);\n// module.exports = thunkify(user, ['add', 'show']);\n// module.exports = thunkify(user, 'add');\n```\n\n## genify\n\nWrap every function return a `GeneratorFunction`,\nthat will be easy to write codes in only one way: `yield* fn()`.\n\n```js\nvar genify = require('thunkify-wrap').genify;\nvar fs = require('fs');\n\nfs.readFile = genify(fs.readFile);\n\nvar content = yield* fs.readFile(__filename, 'utf8');\n```\n\n## event support\n\nyou can pass an event object, give end event name list, wrap event to thunk like this\n\n```\nvar e = new EventEmitter();\nvar end = thunkify.event(e, 'finish');\n\nyield end();\nor\nyield.end(['close', 'end']); // will cover `finish` event\n```\n\nwhen specified events emitted, this generator will go on. see more in the source code.\n\n## ctx\n\nalso you can pass `ctx` as contenxt into thunkify, and `thunkify(object)` will use object as the context by default.\n\n```js\nvar thunkify = require('thunkify-wrap');\nvar Cal = function (a, b) {\n  this.a = a;\n  this.b = b;\n};\n\nCal.prototype.plus = function(callback) {\n  var self = this;\n  setTimeout(function () {\n    callback(null, self.a + self.b);\n  }, 5);\n};\n\nCal.prototype.minus = function (callback) {\n  var self = this;\n  setTimeout(function () {\n    callback(null, self.a - self.b);\n  }, 5);\n};\n\nmodule.exports = Cal;\n\nexports.create1 = function (a, b) {\n  return thunkify(new Cal(a, b));\n};\n\n// or\nexports.create2 = function (a, b) {\n  var cal = new Cal(a, b);\n  cal.plus = thunkify(cal.plus, cal);\n  cal.minus = thunkify(cal.minus, cal);\n};\n```\n\n### methods\n\nby pass `methods` list, support only thunkify a part of methods in an object.\n\n```\nexports.create3 = function (a, b) {\n  var cal = new Cal(a, b);\n  thunkify(cal, cal, ['plus']);\n  // or\n  thunkify(cal, ['plus']);\n};\n```\n\n# License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dead-horse/node-thunkify-wrap.git"
  },
  "scripts": {},
  "version": "1.0.4"
}
