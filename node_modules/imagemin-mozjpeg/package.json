{
  "_args": [
    [
      {
        "raw": "imagemin-mozjpeg@^6.0.0",
        "scope": null,
        "escapedName": "imagemin-mozjpeg",
        "name": "imagemin-mozjpeg",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\image-webpack-loader"
    ]
  ],
  "_from": "imagemin-mozjpeg@>=6.0.0 <7.0.0",
  "_id": "imagemin-mozjpeg@6.0.0",
  "_inCache": true,
  "_location": "/imagemin-mozjpeg",
  "_nodeVersion": "5.11.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/imagemin-mozjpeg-6.0.0.tgz_1461936707653_0.06723950104787946"
  },
  "_npmUser": {
    "name": "kevva",
    "email": "kevinmartensson@gmail.com"
  },
  "_npmVersion": "3.8.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "imagemin-mozjpeg@^6.0.0",
    "scope": null,
    "escapedName": "imagemin-mozjpeg",
    "name": "imagemin-mozjpeg",
    "rawSpec": "^6.0.0",
    "spec": ">=6.0.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/image-webpack-loader"
  ],
  "_resolved": "https://registry.npmjs.org/imagemin-mozjpeg/-/imagemin-mozjpeg-6.0.0.tgz",
  "_shasum": "71a32a457aa1b26117a68eeef2d9b190c2e5091e",
  "_shrinkwrap": null,
  "_spec": "imagemin-mozjpeg@^6.0.0",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\image-webpack-loader",
  "author": {
    "name": "Kevin Mårtensson",
    "email": "kevinmartensson@gmail.com",
    "url": "github.com/kevva"
  },
  "bugs": {
    "url": "https://github.com/imagemin/imagemin-mozjpeg/issues"
  },
  "dependencies": {
    "exec-buffer": "^3.0.0",
    "is-jpg": "^1.0.0",
    "mozjpeg": "^4.0.0"
  },
  "description": "mozjpeg imagemin plugin",
  "devDependencies": {
    "ava": "*",
    "is-progressive": "^1.0.1",
    "pify": "^2.3.0",
    "xo": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "71a32a457aa1b26117a68eeef2d9b190c2e5091e",
    "tarball": "https://registry.npmjs.org/imagemin-mozjpeg/-/imagemin-mozjpeg-6.0.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "ff54b57ea557c9da24a4a9da9da70509ab135925",
  "homepage": "https://github.com/imagemin/imagemin-mozjpeg#readme",
  "keywords": [
    "compress",
    "image",
    "imageminplugin",
    "img",
    "jpeg",
    "jpg",
    "minify",
    "mozjpeg",
    "optimize"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    {
      "name": "Shinnosuke Watanabe",
      "url": "github.com/shinnn"
    }
  ],
  "name": "imagemin-mozjpeg",
  "optionalDependencies": {},
  "readme": "# imagemin-mozjpeg [![Build Status](https://travis-ci.org/imagemin/imagemin-mozjpeg.svg?branch=master)](https://travis-ci.org/imagemin/imagemin-mozjpeg) [![Build status](https://ci.appveyor.com/api/projects/status/uuh7yi48erf4ykyo?svg=true)](https://ci.appveyor.com/project/ShinnosukeWatanabe/imagemin-mozjpeg)\n\n> mozjpeg imagemin plugin\n\n\n## Install\n\n```\n$ npm install --save imagemin-mozjpeg\n```\n\n\n## Usage\n\n```js\nconst imagemin = require('imagemin');\nconst imageminMozjpeg = require('imagemin-mozjpeg');\n\nimagemin(['images/*.jpg'], 'build/images', {use: [imageminMozjpeg()]}).then(() => {\n\tconsole.log('Images optimized');\n});\n```\n\n\n## API\n\n### imageminMozjpeg([options])(buffer)\n\nReturns a promise for a buffer.\n\n#### options\n\n##### quality\n\nType: `number`\n\nCompression quality. Min and max are numbers in range 0 (worst) to 100 (perfect).\n\n##### progressive\n\nType: `boolean`<br>\nDefault: `true`\n\n`false` creates baseline JPEG file.\n\n##### targa\n\nType: `boolean`<br>\nDefault: `false`\n\nInput file is Targa format (usually not needed).\n\n##### revert\n\nType: `boolean`<br>\nDefault: `false`\n\nRevert to standard defaults instead of mozjpeg defaults.\n\n##### fastcrush\n\nType: `boolean`<br>\nDefault: `false`\n\nDisable progressive scan optimization.\n\n##### dcScanOpt\n\nType: `number`<br>\nDefault: `1`\n\nSet DC scan optimization mode.\n\n* `0` One scan for all components\n* `1` One scan per component\n* `2` Optimize between one scan for all components and one scan for 1st component plus one scan for remaining components\n\n##### notrellis\n\nType: `boolean`<br>\nDefault: `false`\n\nDisable [trellis optimization](https://en.wikipedia.org/wiki/Trellis_quantization).\n\n##### notrellisDC\n\nType: `boolean`<br>\nDefault: `false`\n\nDisable trellis optimization of DC coefficients.\n\n##### tune\n\nType: `string`<br>\nDefault: `hvs-psnr`\n\nSet trellis optimization method. Available methods: `psnr`, `hvs-psnr`, `ssim` and `ms-ssim`\n\n##### noovershoot\n\nType: `boolean`<br>\nDefault: `false`\n\nDisable black-on-white deringing via overshoot.\n\n##### arithmetic\n\nType: `boolean`<br>\nDefault: `false`\n\nUse [arithmetic coding](https://en.wikipedia.org/wiki/Arithmetic_coding).\n\n##### quantTable\n\nType: `number`\n\nUse predefined quantization table.\n\n* `0` JPEG Annex K\n* `1` Flat\n* `2` Custom, tuned for MS-SSIM\n* `3` ImageMagick table by N. Robidoux\n* `4` Custom, tuned for PSNR-HVS\n* `5` Table from paper by Klein, Silverstein and Carney\n\n##### smooth\n\nType: `number`\n\nSet the strength of smooth dithered input. (1...100)\n\n##### maxmemory\n\nType: `number`\n\nSet the maximum memory to use in kbytes.\n\n#### buffer\n\nType: `buffer`\n\nBuffer to optimize.\n\n\n## License\n\nMIT © [imagemin](https://github.com/imagemin)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/imagemin/imagemin-mozjpeg.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "6.0.0",
  "xo": {
    "esnext": true
  }
}
