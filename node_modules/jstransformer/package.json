{
  "_args": [
    [
      {
        "raw": "jstransformer@^1.0.0",
        "scope": null,
        "escapedName": "jstransformer",
        "name": "jstransformer",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\kopy"
    ]
  ],
  "_from": "jstransformer@>=1.0.0 <2.0.0",
  "_id": "jstransformer@1.0.0",
  "_inCache": true,
  "_location": "/jstransformer",
  "_nodeVersion": "6.2.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/jstransformer-1.0.0.tgz_1465175586831_0.4917067172937095"
  },
  "_npmUser": {
    "name": "timothygu",
    "email": "timothygu99@gmail.com"
  },
  "_npmVersion": "3.9.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jstransformer@^1.0.0",
    "scope": null,
    "escapedName": "jstransformer",
    "name": "jstransformer",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/kopy"
  ],
  "_resolved": "https://registry.npmjs.org/jstransformer/-/jstransformer-1.0.0.tgz",
  "_shasum": "ed8bf0921e2f3f1ed4d5c1a44f68709ed24722c3",
  "_shrinkwrap": null,
  "_spec": "jstransformer@^1.0.0",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\kopy",
  "author": {
    "name": "ForbesLindesay"
  },
  "bugs": {
    "url": "https://github.com/jstransformers/jstransformer/issues"
  },
  "dependencies": {
    "is-promise": "^2.0.0",
    "promise": "^7.0.1"
  },
  "description": "Normalize the API of any jstransformer",
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.4.0",
    "testit": "^2.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "ed8bf0921e2f3f1ed4d5c1a44f68709ed24722c3",
    "tarball": "https://registry.npmjs.org/jstransformer/-/jstransformer-1.0.0.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "7cad069255989318fc5638228fd2fa54fe35992f",
  "homepage": "https://github.com/jstransformers/jstransformer#readme",
  "keywords": [
    "jstransformer"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    },
    {
      "name": "hemanth",
      "email": "hemanth.hm@gmail.com"
    },
    {
      "name": "robloach",
      "email": "robloach@gmail.com"
    },
    {
      "name": "stoeffel",
      "email": "schtoeffel@gmail.com"
    },
    {
      "name": "timothygu",
      "email": "timothygu99@gmail.com"
    }
  ],
  "name": "jstransformer",
  "optionalDependencies": {},
  "readme": "<p align=\"center\"><img src=\"https://cdn.rawgit.com/jstransformers/jstransformer/2bb6dc6c410e8683a17a4af5f1b73bcbee95aada/logo.svg\" width=\"300px\" height=\"299px\" /></p>\n<h1 align=\"center\">JSTransformer</h1>\n<p align=\"center\">Normalize the API of any jstransformer</p>\n\n<p align=\"center\"><a href=\"https://travis-ci.org/jstransformers/jstransformer\"><img src=\"https://img.shields.io/travis/jstransformers/jstransformer/master.svg\" alt=\"Build Status\"></a>\n<a href=\"https://david-dm.org/jstransformers/jstransformer\"><img src=\"https://img.shields.io/david/jstransformers/jstransformer.svg\" alt=\"Dependency Status\"></a>\n<a href=\"https://david-dm.org/jstransformers/jstransformer#info=devDependencies\"><img src=\"https://img.shields.io/david/dev/jstransformers/jstransformer.svg\" alt=\"Developers' Dependency Status\"></a>\n<a href=\"https://coveralls.io/r/jstransformers/jstransformer?branch=master\"><img src=\"https://img.shields.io/coveralls/jstransformers/jstransformer/master.svg\" alt=\"Coverage Status\"></a>\n<a href=\"https://www.npmjs.org/package/jstransformer\"><img src=\"https://img.shields.io/npm/v/jstransformer.svg\" alt=\"NPM version\"></a></p>\n\n## Installation\n\n    npm install jstransformer\n\n## Usage\n\n```js\nvar transformer = require('jstransformer');\nvar marked = transformer(require('jstransformer-marked'));\n\nvar options = {};\nvar res = marked.render('Some **markdown**', options);\n// => {body: 'Some <strong>markdown</strong>', dependencies: []}\n```\n\nThis gives the same API regardless of the jstransformer passed in.\n\n## API\n\nA transformer, once normalised using this module, will implement the following methods.  Note that if the underlying transformer cannot be used to implement the functionality, it may ultimately just throw an error.\n\n### Returned object from `.render*`\n\n```js\n{body: String, dependencies: Array.<String>}\n```\n\n - `body` represents the result as a string\n - `dependencies` is an array of files that were read in as part of the render process (or an empty array if there were no dependencies)\n\n### `.render`\n\n```js\ntransformer.render(str, options, locals);\n=> {body: String, dependencies: Array.<String>}\n```\n\n_requires the underlying transform to implement `.render` or `.compile`_\n\nTransform a string and return an object.\n\n### `.renderAsync`\n\n```js\ntransformer.renderAsync(str[, options], locals, callback);\n```\n\n```js\ntransformer.renderAsync(str[, options], locals);\n=> Promise({body: String, dependencies: Array.<String>})\n```\n\n_requires the underlying transform to implement `.renderAsync` or `.render`_\n\nTransform a string asynchronously. If a callback is provided, it is called as `callback(err, data)`, otherwise a Promise is returned.\n\n### `.renderFile`\n\n```js\ntransformer.renderFile(filename, options, locals)\n=> {body: String, dependencies: Array.<String>}\n```\n\n_requires the underlying transform to implement `.renderFile`, `.render`, `.compileFile`, or `.compile`_\n\nTransform a file and return an object.\n\n### `.renderFileAsync`\n\n```js\ntransformer.renderFileAsync(filename[, options], locals, callback);\n```\n\n```js\ntransformer.renderFileAsync(filename[, options], locals);\n=> Promise({body: String, dependencies: Array.<String>})\n```\n\n_requires the underlying transform to implement `.renderFileAsync`, `.renderFile`, `.renderAsync`, `.render`, `.compileFileAsync`, `.compileFile`, `.compileAsync`, or `.compileFile`_\n\nTransform a file asynchronously. If a callback is provided, it is called as `callback(err, data)`, otherwise a Promise is returned.\n\n### `.inputFormats`\n\n```js\nvar formats = transformer.inputFormats;\n=> ['md', 'markdown']\n```\n\nReturns an array of strings representing potential input formats for the transform. If not provided directly by the transform, results in an array containing the name of the transform.\n\n### `.outputFormat`\n\n```js\nvar md = require('jstransformer')(require('jstransformer-markdown'))\nvar outputFormat = md.outputFormat\n=> 'html'\n```\n\nReturns a string representing the default output format the transform would be expected to return when calling `.render()`.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jstransformers/jstransformer.git"
  },
  "scripts": {
    "coverage": "istanbul cover test",
    "coveralls": "npm run coverage && cat ./coverage/lcov.info | coveralls",
    "test": "node test"
  },
  "version": "1.0.0"
}
