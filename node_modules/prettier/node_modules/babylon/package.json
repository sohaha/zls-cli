{
  "_args": [
    [
      {
        "raw": "babylon@7.0.0-beta.8",
        "scope": null,
        "escapedName": "babylon",
        "name": "babylon",
        "rawSpec": "7.0.0-beta.8",
        "spec": "7.0.0-beta.8",
        "type": "version"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\prettier"
    ]
  ],
  "_from": "babylon@7.0.0-beta.8",
  "_id": "babylon@7.0.0-beta.8",
  "_inCache": true,
  "_location": "/prettier/babylon",
  "_nodeVersion": "6.10.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/babylon-7.0.0-beta.8.tgz_1491336561590_0.49707880639471114"
  },
  "_npmUser": {
    "name": "danez",
    "email": "daniel@tschinder.de"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babylon@7.0.0-beta.8",
    "scope": null,
    "escapedName": "babylon",
    "name": "babylon",
    "rawSpec": "7.0.0-beta.8",
    "spec": "7.0.0-beta.8",
    "type": "version"
  },
  "_requiredBy": [
    "/prettier"
  ],
  "_resolved": "https://registry.npmjs.org/babylon/-/babylon-7.0.0-beta.8.tgz",
  "_shasum": "2bdc5ae366041442c27e068cce6f0d7c06ea9949",
  "_shrinkwrap": null,
  "_spec": "babylon@7.0.0-beta.8",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\prettier",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "ava": {
    "files": [
      "test/*.js"
    ],
    "source": [
      "src/**/*.js",
      "bin/**/*.js"
    ]
  },
  "bin": {
    "babylon": "./bin/babylon.js"
  },
  "bugs": {
    "url": "https://github.com/babel/babylon/issues"
  },
  "contributors": [
    {
      "name": "List of Acorn contributors. Updated before every release."
    },
    {
      "name": "Adrian Rakovsky"
    },
    {
      "name": "Alistair Braidwood"
    },
    {
      "name": "Andres Suarez"
    },
    {
      "name": "Aparajita Fishman"
    },
    {
      "name": "Arian Stolwijk"
    },
    {
      "name": "Artem Govorov"
    },
    {
      "name": "Brandon Mills"
    },
    {
      "name": "Charles Hughes"
    },
    {
      "name": "Conrad Irwin"
    },
    {
      "name": "David Bonnet"
    },
    {
      "name": "Forbes Lindesay"
    },
    {
      "name": "Gilad Peleg"
    },
    {
      "name": "impinball"
    },
    {
      "name": "Ingvar Stepanyan"
    },
    {
      "name": "Jesse McCarthy"
    },
    {
      "name": "Jiaxing Wang"
    },
    {
      "name": "Joel Kemp"
    },
    {
      "name": "Johannes Herr"
    },
    {
      "name": "Jürg Lehni"
    },
    {
      "name": "keeyipchan"
    },
    {
      "name": "Kevin Kwok"
    },
    {
      "name": "krator"
    },
    {
      "name": "Marijn Haverbeke"
    },
    {
      "name": "Martin Carlberg"
    },
    {
      "name": "Mathias Bynens"
    },
    {
      "name": "Mathieu 'p01' Henri"
    },
    {
      "name": "Max Schaefer"
    },
    {
      "name": "Max Zerzouri"
    },
    {
      "name": "Mihai Bazon"
    },
    {
      "name": "Mike Rennie"
    },
    {
      "name": "Nick Fitzgerald"
    },
    {
      "name": "Oskar Schöldström"
    },
    {
      "name": "Paul Harper"
    },
    {
      "name": "Peter Rust"
    },
    {
      "name": "PlNG"
    },
    {
      "name": "r-e-d"
    },
    {
      "name": "Rich Harris"
    },
    {
      "name": "Sebastian McKenzie"
    },
    {
      "name": "zsjforcn"
    }
  ],
  "dependencies": {},
  "description": "A JavaScript parser",
  "devDependencies": {
    "ava": "^0.18.0",
    "babel-cli": "^7.0.0-alpha.6",
    "babel-eslint": "^7.0.0",
    "babel-helper-fixtures": "^7.0.0-alpha.3",
    "babel-plugin-external-helpers": "^7.0.0-alpha.3",
    "babel-plugin-istanbul": "^4.0.0",
    "babel-plugin-transform-flow-strip-types": "^7.0.0-alpha.3",
    "babel-preset-es2015": "^7.0.0-alpha.3",
    "babel-preset-stage-0": "^7.0.0-alpha.3",
    "chalk": "^1.1.3",
    "cross-env": "^4.0.0",
    "eslint": "^3.7.1",
    "eslint-config-babel": "^6.0.0",
    "eslint-plugin-flowtype": "^2.20.0",
    "flow-bin": "^0.42.0",
    "nyc": "^10.0.0",
    "rimraf": "^2.5.4",
    "rollup": "^0.41.0",
    "rollup-plugin-babel": "^2.6.1",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-watch": "^3.2.2",
    "unicode-9.0.0": "~0.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "2bdc5ae366041442c27e068cce6f0d7c06ea9949",
    "tarball": "https://registry.npmjs.org/babylon/-/babylon-7.0.0-beta.8.tgz"
  },
  "engines": {
    "node": ">=4.2.0"
  },
  "files": [
    "bin",
    "lib"
  ],
  "gitHead": "4147c01ac0b2de79d0dad1ba88a99b6886e8eece",
  "homepage": "https://babeljs.io/",
  "keywords": [
    "babel",
    "javascript",
    "parser",
    "babylon"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    }
  ],
  "name": "babylon",
  "nyc": {
    "include": [
      "src/**/*.js",
      "bin/**/*.js"
    ],
    "sourceMap": false,
    "instrument": false
  },
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <img alt=\"babylon\" src=\"https://raw.githubusercontent.com/babel/logo/master/babylon.png\" width=\"700\">\n</p>\n\n<p align=\"center\">\n  Babylon is a JavaScript parser used in <a href=\"https://github.com/babel/babel\">Babel</a>.\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/babylon\"><img alt=\"NPM Version\" src=\"https://img.shields.io/npm/v/babylon.svg?style=flat\"></a>\n  <a href=\"https://travis-ci.org/babel/babylon\"><img alt=\"Travis Status\" src=\"https://img.shields.io/travis/babel/babylon/master.svg?style=flat&label=travis\"></a>\n  <a href=\"https://codecov.io/gh/babel/babylon\"><img alt=\"Codecov Status\" src=\"https://img.shields.io/codecov/c/github/babel/babylon/master.svg?style=flat\"></a>\n</p>\n\n - The latest ECMAScript version enabled by default (ES2017).\n - Comment attachment.\n - Support for JSX and Flow.\n - Support for experimental language proposals (accepting PRs for anything at least [stage-0](https://github.com/tc39/proposals/blob/master/stage-0-proposals.md)).\n\n## Credits\n\nHeavily based on [acorn](https://github.com/marijnh/acorn) and [acorn-jsx](https://github.com/RReverser/acorn-jsx),\nthanks to the awesome work of [@RReverser](https://github.com/RReverser) and [@marijnh](https://github.com/marijnh).\n\nSignificant diversions are expected to occur in the future such as streaming, EBNF definitions, sweet.js integration, interspatial parsing and more.\n\n## API\n\n### `babylon.parse(code, [options])`\n\n### `babylon.parseExpression(code, [options])`\n\n`parse()` parses the provided `code` as an entire ECMAScript program, while\n`parseExpression()` tries to parse a single Expression with performance in\nmind. When in doubt, use `.parse()`.\n\n### Options\n\n- **allowImportExportEverywhere**: By default, `import` and `export`\n  declarations can only appear at a program's top level. Setting this\n  option to `true` allows them anywhere where a statement is allowed.\n\n- **allowReturnOutsideFunction**: By default, a return statement at\n  the top level raises an error. Set this to `true` to accept such\n  code.\n\n- **allowSuperOutsideMethod**: TODO\n\n- **sourceType**: Indicate the mode the code should be parsed in. Can be\n  either `\"script\"` or `\"module\"`.\n\n- **sourceFilename**: Correlate output AST nodes with their source filename.  Useful when generating code and source maps from the ASTs of multiple input files.\n\n- **startLine**: By default, the first line of code parsed is treated as line 1. You can provide a line number to alternatively start with. Useful for integration with other source tools.\n\n- **plugins**: Array containing the plugins that you want to enable.\n\n- **strictMode**: TODO\n\n- **ranges**: Adds a `ranges` property to each node: `[node.start, node.end]`\n\n### Output\n\nBabylon generates AST according to [Babel AST format][].\nIt is based on [ESTree spec][] with the following deviations:\n\n> There is now an `estree` plugin which reverts these deviations\n\n- [Literal][] token is replaced with [StringLiteral][], [NumericLiteral][], [BooleanLiteral][], [NullLiteral][], [RegExpLiteral][]\n- [Property][] token is replaced with [ObjectProperty][] and [ObjectMethod][]\n- [MethodDefinition][] is replaced with [ClassMethod][]\n- [Program][] and [BlockStatement][] contain additional `directives` field with [Directive][] and [DirectiveLiteral][]\n- [ClassMethod][], [ObjectProperty][], and [ObjectMethod][] value property's properties in [FunctionExpression][] is coerced/brought into the main method node.\n\nAST for JSX code is based on [Facebook JSX AST][] with the addition of one node type:\n\n- `JSXText`\n\n[Babel AST format]: https://github.com/babel/babylon/blob/master/ast/spec.md\n[ESTree spec]: https://github.com/estree/estree\n\n[Literal]: https://github.com/estree/estree/blob/master/es5.md#literal\n[Property]: https://github.com/estree/estree/blob/master/es5.md#property\n[MethodDefinition]: https://github.com/estree/estree/blob/master/es2015.md#methoddefinition\n\n[StringLiteral]: https://github.com/babel/babylon/blob/master/ast/spec.md#stringliteral\n[NumericLiteral]: https://github.com/babel/babylon/blob/master/ast/spec.md#numericliteral\n[BooleanLiteral]: https://github.com/babel/babylon/blob/master/ast/spec.md#booleanliteral\n[NullLiteral]: https://github.com/babel/babylon/blob/master/ast/spec.md#nullliteral\n[RegExpLiteral]: https://github.com/babel/babylon/blob/master/ast/spec.md#regexpliteral\n[ObjectProperty]: https://github.com/babel/babylon/blob/master/ast/spec.md#objectproperty\n[ObjectMethod]: https://github.com/babel/babylon/blob/master/ast/spec.md#objectmethod\n[ClassMethod]: https://github.com/babel/babylon/blob/master/ast/spec.md#classmethod\n[Program]: https://github.com/babel/babylon/blob/master/ast/spec.md#programs\n[BlockStatement]: https://github.com/babel/babylon/blob/master/ast/spec.md#blockstatement\n[Directive]: https://github.com/babel/babylon/blob/master/ast/spec.md#directive\n[DirectiveLiteral]: https://github.com/babel/babylon/blob/master/ast/spec.md#directiveliteral\n[FunctionExpression]: https://github.com/babel/babylon/blob/master/ast/spec.md#functionexpression\n\n[Facebook JSX AST]: https://github.com/facebook/jsx/blob/master/AST.md\n\n### Semver\n\nBabylon follows semver in most situations. The only thing to note is that some spec-compliancy bug fixes may be released under patch versions.\n\nFor example: We push a fix to early error on something like [#107](https://github.com/babel/babylon/pull/107) - multiple default exports per file. That would be considered a bug fix even though it would cause a build to fail.\n\n### Example\n\n```javascript\nrequire(\"babylon\").parse(\"code\", {\n  // parse in strict mode and allow module declarations\n  sourceType: \"module\",\n\n  plugins: [\n    // enable jsx and flow syntax\n    \"jsx\",\n    \"flow\"\n  ]\n});\n```\n\n### Plugins\n\n - `estree`\n - `jsx`\n - `flow`\n - `doExpressions`\n - `objectRestSpread`\n - `decorators` (Based on an outdated version of the Decorators proposal. Will be removed in a future version of `Babylon`)\n - `classProperties`\n - `exportExtensions`\n - `asyncGenerators`\n - `functionBind`\n - `functionSent`\n - `dynamicImport`\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/babel/babylon.git"
  },
  "scripts": {
    "build": "yarn run clean && rollup -c",
    "changelog": "git log `git describe --tags --abbrev=0`..HEAD --pretty=format:' * %s (%an)' | grep -v 'Merge pull request'",
    "clean": "rimraf lib",
    "flow": "flow",
    "lint": "eslint src bin",
    "prepublish": "cross-env BABEL_ENV=production yarn run build",
    "preversion": "yarn run test && npm run changelog",
    "test": "yarn run lint && yarn run flow && yarn run build -- -m && yarn run test-only",
    "test-coverage": "cross-env BABEL_ENV=test yarn run build && nyc --reporter=json --reporter=text yarn run test-only",
    "test-only": "ava",
    "watch": "yarn run clean && rollup -c --watch"
  },
  "version": "7.0.0-beta.8"
}
