{
  "_args": [
    [
      {
        "raw": "prettier@^1.2.2",
        "scope": null,
        "escapedName": "prettier",
        "name": "prettier",
        "rawSpec": "^1.2.2",
        "spec": ">=1.2.2 <2.0.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\eslint-config-rem"
    ]
  ],
  "_from": "prettier@>=1.2.2 <2.0.0",
  "_id": "prettier@1.3.1",
  "_inCache": true,
  "_location": "/prettier",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/prettier-1.3.1.tgz_1493847583691_0.5498876061756164"
  },
  "_npmUser": {
    "name": "vjeux",
    "email": "vjeuxx@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {
    "fs.realpath": "1.0.0",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "minimatch": "3.0.4",
    "once": "1.4.0",
    "path-is-absolute": "1.0.1"
  },
  "_requested": {
    "raw": "prettier@^1.2.2",
    "scope": null,
    "escapedName": "prettier",
    "name": "prettier",
    "rawSpec": "^1.2.2",
    "spec": ">=1.2.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eslint-config-rem"
  ],
  "_resolved": "https://registry.npmjs.org/prettier/-/prettier-1.3.1.tgz",
  "_shasum": "fa0ea84b45ac0ba6de6a1e4cecdcff900d563151",
  "_shrinkwrap": null,
  "_spec": "prettier@^1.2.2",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\eslint-config-rem",
  "author": {
    "name": "James Long"
  },
  "bin": {
    "prettier": "./bin/prettier.js"
  },
  "bugs": {
    "url": "https://github.com/prettier/prettier/issues"
  },
  "dependencies": {
    "ast-types": "0.9.8",
    "babel-code-frame": "6.22.0",
    "babylon": "7.0.0-beta.8",
    "chalk": "1.1.3",
    "esutils": "2.0.2",
    "flow-parser": "0.45.0",
    "get-stdin": "5.0.1",
    "glob": "7.1.1",
    "jest-validate": "19.0.0",
    "minimist": "1.2.0"
  },
  "description": "Prettier is an opinionated JavaScript formatter",
  "devDependencies": {
    "diff": "3.2.0",
    "jest": "19.0.1",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.6.1",
    "rollup": "0.41.1",
    "rollup-plugin-commonjs": "7.0.0",
    "rollup-plugin-json": "2.1.0",
    "rollup-plugin-node-builtins": "2.0.0",
    "rollup-plugin-node-globals": "1.1.0",
    "rollup-plugin-node-resolve": "2.0.0",
    "typescript": "2.3.2",
    "typescript-eslint-parser": "git://github.com/eslint/typescript-eslint-parser.git#a294afa8158c9c088521eed72b6745eed302361c"
  },
  "directories": {},
  "dist": {
    "shasum": "fa0ea84b45ac0ba6de6a1e4cecdcff900d563151",
    "tarball": "https://registry.npmjs.org/prettier/-/prettier-1.3.1.tgz"
  },
  "gitHead": "4970cfd243a858ec6ab2e09f045ce5c32682bc4e",
  "homepage": "https://github.com/prettier/prettier#readme",
  "jest": {
    "setupFiles": [
      "<rootDir>/tests_config/run_spec.js"
    ],
    "snapshotSerializers": [
      "<rootDir>/tests_config/raw-serializer.js"
    ],
    "testRegex": "jsfmt\\.spec\\.js$",
    "testPathIgnorePatterns": [
      "tests/new_react",
      "tests/more_react"
    ]
  },
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "jlongster",
      "email": "longster@gmail.com"
    },
    {
      "name": "vjeux",
      "email": "vjeuxx@gmail.com"
    }
  ],
  "name": "prettier",
  "optionalDependencies": {},
  "readme": "# Prettier\n\n[![Gitter](https://badges.gitter.im/gitterHQ/gitter.svg)](https://gitter.im/jlongster/prettier)\n[![Build Status](https://travis-ci.org/prettier/prettier.svg?branch=master)](https://travis-ci.org/prettier/prettier)\n[![NPM version](https://img.shields.io/npm/v/prettier.svg)](https://www.npmjs.com/package/prettier)\n\n<!-- toc -->\n\n- [Usage](#usage)\n  * [CLI](#cli)\n    + [Pre-commit hook for changed files](#pre-commit-hook-for-changed-files)\n  * [API](#api)\n  * [Excluding code from formatting](#excluding-code-from-formatting)\n- [Editor Integration](#editor-integration)\n  * [Atom](#atom)\n  * [Emacs](#emacs)\n  * [Vim](#vim)\n    + [Vanilla approach](#vanilla-approach)\n    + [Neoformat approach](#neoformat-approach)\n    + [Customizing Prettier in Vim](#customizing-prettier-in-vim)\n  * [Visual Studio Code](#visual-studio-code)\n  * [Visual Studio](#visual-studio)\n  * [Sublime Text](#sublime-text)\n  * [JetBrains](#jetbrains)\n- [Language Support](#language-support)\n- [Related Projects](#related-projects)\n- [Technical Details](#technical-details)\n- [Badge](#badge)\n- [Contributing](#contributing)\n\n<!-- tocstop -->\n\nPrettier is an opinionated JavaScript formatter inspired by\n[refmt](https://facebook.github.io/reason/tools.html) with advanced\nsupport for language features from [ES2017](https://github.com/tc39/proposals/blob/master/finished-proposals.md), [JSX](https://facebook.github.io/jsx/), and [Flow](https://flow.org/). It removes\nall original styling and ensures that all outputted JavaScript\nconforms to a consistent style. (See this [blog post](http://jlongster.com/A-Prettier-Formatter))\n\nIf you are interested in the details, you can watch those two conference talks:\n\n<a href=\"https://www.youtube.com/watch?v=hkfBvpEfWdA\"><img width=\"298\" src=\"https://cloud.githubusercontent.com/assets/197597/24886367/dda8a6f0-1e08-11e7-865b-22492450f10f.png\"></a> <a href=\"https://www.youtube.com/watch?v=0Q4kUNx85_4\"><img width=\"298\" src=\"https://cloud.githubusercontent.com/assets/197597/24886368/ddacd6f8-1e08-11e7-806a-9febd23cbf47.png\"></a>\n\nThis goes way beyond [ESLint](http://eslint.org/) and other projects\n[built on it](https://github.com/feross/standard). Unlike ESLint,\nthere aren't a million configuration options and rules. But more\nimportantly: **everything is fixable**. This works because Prettier\nnever \"checks\" anything; it takes JavaScript as input and delivers the\nformatted JavaScript as output.\n\nIn technical terms: Prettier parses your JavaScript into an AST (Abstract Syntax Tree) and\npretty-prints the AST, completely ignoring any of the original\nformatting. Say hello to completely consistent syntax!\n\nThere's an extremely important piece missing from existing styling\ntools: **the maximum line length**. Sure, you can tell ESLint to warn\nyou when you have a line that's too long, but that's an after-thought\n(ESLint *never* knows how to fix it). The maximum line length is a\ncritical piece the formatter needs for laying out and wrapping code.\n\nFor example, take the following code:\n\n```js\nfoo(arg1, arg2, arg3, arg4);\n```\n\nThat looks like the right way to format it. However, we've all run\ninto this situation:\n\n```js\nfoo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());\n```\n\nSuddenly our previous format for calling function breaks down because\nthis is too long. What you would probably do is this instead:\n\n```js\nfoo(\n  reallyLongArg(),\n  omgSoManyParameters(),\n  IShouldRefactorThis(),\n  isThereSeriouslyAnotherOne()\n);\n```\n\nThis clearly shows that the maximum line length has a direct impact on\nthe style of code we desire. The fact that current style tools ignore\nthis means they can't really help with the situations that are\nactually the most troublesome. Individuals on teams will all format\nthese differently according to their own rules and we lose the\nconsistency we sought after.\n\nEven if we disregard line widths, it's too easy to sneak in various\nstyles of code in all other linters. The most strict linter I know\nhappily lets all these styles happen:\n\n```js\nfoo({ num: 3 },\n  1, 2)\n\nfoo(\n  { num: 3 },\n  1, 2)\n\nfoo(\n  { num: 3 },\n  1,\n  2\n)\n```\n\nPrettier bans all custom styling by parsing it away and re-printing\nthe parsed AST with its own rules that take the maximum line width\ninto account, wrapping code when necessary.\n\n## Usage\n\nInstall:\n\n```\nyarn add prettier --dev\n```\n\nYou can install it globally if you like:\n\n```\nyarn global add prettier\n```\n\n*We're defaulting to `yarn` but you can use `npm` if you like:*\n\n```\nnpm install [-g] prettier\n```\n\n### CLI\n\nRun Prettier through the CLI with this script. Run it without any\narguments to see the options.\n\nTo format a file in-place, use `--write`. You may want to consider\ncommitting your code before doing that, just in case.\n\n```bash\nprettier [opts] [filename ...]\n```\n\nIn practice, this may look something like:\n\n```bash\nprettier --single-quote --trailing-comma es5 --write \"{app,__{tests,mocks}__}/**/*.js\"\n```\n\n(Don't forget the quotes around the globs! The quotes make sure that Prettier\nexpands the globs rather than your shell, for cross-platform usage.)\n\nIn the future we will have better support for formatting whole projects.\n\n#### Pre-commit hook for changed files\n\n[lint-staged](https://github.com/okonet/lint-staged) can re-format your files that are marked as \"staged\" via `git add`  before you commit.\n\nInstall it along with [husky](https://github.com/typicode/husky):\n\n```bash\nyarn add lint-staged husky --dev\n```\n\nand add this config to your `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"*.js\": [\n      \"prettier --write\",\n      \"git add\"\n    ]\n  }\n}\n```\n\nSee https://github.com/okonet/lint-staged#configuration for more details about how you can configure lint-staged.\n\nAlternately you can just save this script as `.git/hooks/pre-commit` and give it execute permission:\n\n```bash\n#!/bin/sh\njsfiles=$(git diff --cached --name-only --diff-filter=ACM | grep '\\.jsx\\?$' | tr '\\n' ' ')\n[ -z \"$jsfiles\" ] && exit 0\n\ndiffs=$(node_modules/.bin/prettier -l $jsfiles)\n[ -z \"$diffs\" ] && exit 0\n\necho \"here\"\necho >&2 \"Javascript files must be formatted with prettier. Please run:\"\necho >&2 \"node_modules/.bin/prettier --write \"$diffs\"\"\n\nexit 1\n```\n\n### API\n\nThe API has two functions, exported as `format` and `check`. The options\nargument is optional, and all of the defaults are shown below:\n\n```js\nconst prettier = require(\"prettier\");\n\nprettier.format(source, {\n  // Indent lines with tabs\n  useTabs: false,\n\n  // Fit code within this line limit\n  printWidth: 80,\n\n  // Number of spaces it should use per tab\n  tabWidth: 2,\n\n  // If true, will use single instead of double quotes\n  singleQuote: false,\n\n  // Controls the printing of trailing commas wherever possible. Valid options:\n  // \"none\" - No trailing commas\n  // \"es5\"  - Trailing commas where valid in ES5 (objects, arrays, etc)\n  // \"all\"  - Trailing commas wherever possible (function arguments)\n  //\n  // NOTE: Above is only available in 0.19.0 and above. Previously this was\n  // a boolean argument.\n  trailingComma: \"none\",\n\n  // Controls the printing of spaces inside object literals\n  bracketSpacing: true,\n\n  // If true, puts the `>` of a multi-line jsx element at the end of\n  // the last line instead of being alone on the next line\n  jsxBracketSameLine: false,\n\n  // Which parser to use. Valid options are \"flow\" and \"babylon\"\n  parser: \"babylon\",\n\n  // Whether to add a semicolon at the end of every line (semi: true),\n  // or only at the beginning of lines that may introduce ASI failures (semi: false)\n  semi: true\n});\n```\n\n`check` checks to see if the file has been formatted with Prettier given those options and returns a Boolean.\nThis is similar to the `--list-different` parameter in the CLI and is useful for running Prettier in CI scenarios.\n\n### Excluding code from formatting\n\nA JavaScript comment of `// prettier-ignore` will exclude the next node in the abstract syntax tree from formatting.\n\nFor example:\n\n```js\nmatrix(\n  1, 0, 0,\n  0, 1, 0,\n  0, 0, 1\n)\n\n// prettier-ignore\nmatrix(\n  1, 0, 0,\n  0, 1, 0,\n  0, 0, 1\n)\n```\n\nwill be transformed to:\n\n```js\nmatrix(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\n// prettier-ignore\nmatrix(\n  1, 0, 0,\n  0, 1, 0,\n  0, 0, 1\n)\n```\n\n## Editor Integration\n\n### Atom\n\nAtom users can simply install the [prettier-atom](https://github.com/prettier/prettier-atom) package and use\n`Ctrl+Alt+F` to format a file (or format on save if enabled).\n\n### Emacs\n\nEmacs users should see [this directory](https://github.com/prettier/prettier/tree/master/editors/emacs)\nfor on-demand formatting.\n\n### Vim\n\nFor Vim users, there are two main approaches: one that leans on [sbdchd](https://github.com/sbdchd)/[neoformat](https://github.com/sbdchd/neoformat), which has the advantage of leaving the cursor in the same position despite changes, or a vanilla approach which can only approximate the cursor location, but might be good enough for your needs.\n\n#### Vanilla approach\n\nVim users can add the following to their `.vimrc`:\n\n```vim\nautocmd FileType javascript set formatprg=prettier\\ --stdin\n```\n\nIf you use the [vim-jsx](https://github.com/mxw/vim-jsx) plugin without\nrequiring the `.jsx` file extension (See https://github.com/mxw/vim-jsx#usage),\nthe FileType needs to include `javascript.jsx`:\n\n```vim\nautocmd FileType javascript.jsx,javascript setlocal formatprg=prettier\\ --stdin\n```\n\nThis makes Prettier power the [`gq` command](http://vimdoc.sourceforge.net/htmldoc/change.html#gq)\nfor automatic formatting without any plugins. You can also add the following to your\n`.vimrc` to run Prettier when `.js` files are saved:\n\n```vim\nautocmd BufWritePre *.js :normal gggqG\n```\n\nIf you want to restore cursor position after formatting, try this\n(although it's not guaranteed that it will be restored to the same\nplace in the code since it may have moved):\n\n```vim\nautocmd BufWritePre *.js exe \"normal! gggqG\\<C-o>\\<C-o>\"\n```\n\n#### Neoformat approach\n\nAdd [sbdchd](https://github.com/sbdchd)/[neoformat](https://github.com/sbdchd/neoformat) to your list based on the tool you use:\n\n```vim\nPlug 'sbdchd/neoformat'\n```\n\nThen make Neoformat run on save:\n\n```vim\nautocmd BufWritePre *.js Neoformat\n```\n\n#### Other `autocmd` events\n\nYou can also make Vim format your code more frequently, by setting an `autocmd` for other events. Here are a couple of useful ones:\n\n* `TextChanged`: after a change was made to the text in Normal mode\n* `InsertLeave`: when leaving Insert mode\n\nFor example, you can format on both of the above events together with `BufWritePre` like this:\n\n```vim\nautocmd BufWritePre,TextChanged,InsertLeave *.js Neoformat\n```\n\nSee `:help autocmd-events` in Vim for details.\n\n#### Customizing Prettier in Vim\n\nIf your project requires settings other than the default Prettier settings, you can pass arguments to do so in your `.vimrc` or [vim project](http://vim.wikia.com/wiki/Project_specific_settings), you can do so:\n\n```vim\nautocmd FileType javascript set formatprg=prettier\\ --stdin\\ --parser\\ flow\\ --single-quote\\ --trailing-comma\\ es5\n```\n\nEach command needs to be escaped with `\\`. If you are using Neoformat and you want it to recognize your formatprg settings you can also do that by adding the following to your `.vimrc`:\n\n```vim\n\" Use formatprg when available\nlet g:neoformat_try_formatprg = 1\n```\n\n### Visual Studio Code\n\nCan be installed using the extension sidebar. Search for `Prettier - JavaScript formatter`.\n\nCan also be installed using `ext install prettier-vscode`.\n\n[Check its repository for configuration and shortcuts](https://github.com/esbenp/prettier-vscode)\n\n### Visual Studio\n\nInstall the [JavaScript Prettier extension](https://github.com/madskristensen/JavaScriptPrettier).\n\n### Sublime Text\n\nSublime Text support is available through Package Control and\nthe [JsPrettier](https://packagecontrol.io/packages/JsPrettier) plug-in.\n\n### JetBrains\n\nJetBrains users can configure `prettier` as an **External Tool**.\nSee [this blog post](https://blog.jetbrains.com/webstorm/2016/08/using-external-tools/) or [this\ndirectory](https://github.com/jlongster/prettier/tree/master/editors/jetbrains) with examples.\n\nMore editors are coming soon.\n\n## Language Support\n\nPrettier attempts to support all JavaScript language features,\nincluding non-standardized ones. By default it uses the\n[Babylon](https://github.com/babel/babylon) parser with all language\nfeatures enabled, but you can also use the\n[Flow](https://github.com/facebook/flow) parser with the\n`parser` API or `--parser` CLI option.\n\nAll of JSX and Flow syntax is supported. In fact, the test suite in\n`tests` *is* the entire Flow test suite and they all pass.\n\n## Related Projects\n\n- [`eslint-plugin-prettier`](https://github.com/not-an-aardvark/eslint-plugin-prettier) plugs Prettier into your ESLint workflow\n- [`eslint-config-prettier`](https://github.com/prettier/eslint-config-prettier) turns off all ESLint rules that are unnecessary or might conflict with Prettier\n- [`prettier-eslint`](https://github.com/prettier/prettier-eslint)\npasses `prettier` output to `eslint --fix`\n- [`prettier-standard`](https://github.com/sheerun/prettier-standard)\nuses `prettier` and `prettier-eslint` to format code with standard rules\n- [`prettier-standard-formatter`](https://github.com/dtinth/prettier-standard-formatter)\npasses `prettier` output to `standard --fix`\n- [`prettier-miscellaneous`](https://github.com/arijs/prettier-miscellaneous)\n`prettier` with a few minor extra options\n- [`neutrino-preset-prettier`](https://github.com/SpencerCDixon/neutrino-preset-prettier) allows you to use Prettier as a Neutrino preset\n- [`prettier_d`](https://github.com/josephfrazier/prettier_d.js) runs Prettier as a server to avoid Node.js startup delay\n\n\n## Technical Details\n\nThis printer is a fork of\n[recast](https://github.com/benjamn/recast)'s printer with its\nalgorithm replaced by the one described by Wadler in \"[A prettier\nprinter](http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf)\".\nThere still may be leftover code from recast that needs to be cleaned\nup.\n\nThe basic idea is that the printer takes an AST and returns an\nintermediate representation of the output, and the printer uses that\nto generate a string. The advantage is that the printer can \"measure\"\nthe IR and see if the output is going to fit on a line, and break if\nnot.\n\nThis means that most of the logic of printing an AST involves\ngenerating an abstract representation of the output involving certain\ncommands. For example, `concat([\"(\", line, arg, line \")\"])` would\nrepresent a concatentation of opening parens, an argument, and closing\nparens. But if that doesn't fit on one line, the printer can break\nwhere `line` is specified.\n\nMore (rough) details can be found in [commands.md](commands.md).\nBetter docs will come soon.\n\n## Badge\n\nShow the world you're using *Prettier* → [![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n```md\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n```\n\n## Contributing\n\nTo get up and running, install the dependencies and run the tests:\n\n```\nyarn\nyarn test\n```\n\nHere's what you need to know about the tests:\n\n* The tests uses [Jest](https://facebook.github.io/jest/) snapshots.\n* You can make changes and run `jest -u` (or `yarn test -- -u`) to update the\n  snapshots. Then run `git diff` to take a look at what changed. Always update\n  the snapshots when opening a PR.\n* You can run `AST_COMPARE=1 jest` for a more robust test run. That formats each\n  file, re-parses it, and compares the new AST with the original one and makes\n  sure they are semantically equivalent.\n* Each test folder has a `jsfmt.spec.js` that runs the tests. Normally you can\n  just put `run_spec(__dirname);` there. You can also pass options and\n  additional parsers, like this:\n  `run_spec(__dirname, { trailingComma: \"es5\" }, [\"babylon\"]);`\n* `tests/flow/` contains the Flow test suite, and is not supposed to be edited\n  by hand. To update it, clone the Flow repo next to the Prettier repo and run:\n  `node scripts/sync-flow-tests.js ../flow/tests/`.\n* If you would like to debug prettier locally, you can either debug it in node\n  or the browser. The easiest way to debug it in the browser is to run the\n  interactive `docs` REPL locally. The easiest way to debug it in node, is to\n  create a local test file and run it in an editor like VS Code.\n\nIf you can, take look at [commands.md](commands.md) and check out [Wadler's\npaper](http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf) to\nunderstand how Prettier works.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/prettier/prettier.git"
  },
  "scripts": {
    "build:docs": "rollup -c docs/rollup.config.js",
    "format": "./bin/prettier.js --write",
    "format:all": "npm run format -- index.js src/*.js bin/*.js",
    "format:single": "npm run format -- src/printer.js",
    "test": "jest"
  },
  "version": "1.3.1"
}
