{
  "_args": [
    [
      {
        "raw": "babel-plugin-transform-vue-jsx",
        "scope": null,
        "escapedName": "babel-plugin-transform-vue-jsx",
        "name": "babel-plugin-transform-vue-jsx",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "S:\\SDK\\www\\Z\\zls.init"
    ]
  ],
  "_from": "babel-plugin-transform-vue-jsx@latest",
  "_id": "babel-plugin-transform-vue-jsx@3.4.3",
  "_inCache": true,
  "_location": "/babel-plugin-transform-vue-jsx",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/babel-plugin-transform-vue-jsx-3.4.3.tgz_1493626044458_0.6448160712607205"
  },
  "_npmUser": {
    "name": "yyx990803",
    "email": "yyx990803@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-transform-vue-jsx",
    "scope": null,
    "escapedName": "babel-plugin-transform-vue-jsx",
    "name": "babel-plugin-transform-vue-jsx",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-transform-vue-jsx/-/babel-plugin-transform-vue-jsx-3.4.3.tgz",
  "_shasum": "de57d8dd7d619333c981867728f3e6fdf68982ff",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-transform-vue-jsx",
  "_where": "S:\\SDK\\www\\Z\\zls.init",
  "author": {
    "name": "Evan You"
  },
  "bugs": {
    "url": "https://github.com/vuejs/babel-plugin-transform-vue-jsx/issues"
  },
  "dependencies": {
    "esutils": "^2.0.2"
  },
  "description": "Babel plugin for Vue 2.0 JSX",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-helper-vue-jsx-merge-props": "^2.0.2",
    "babel-loader": "^6.2.4",
    "babel-plugin-syntax-jsx": "^6.8.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-register": "^6.9.0",
    "chai": "^3.5.0",
    "eslint": "^2.12.0",
    "eslint-config-vue": "^2.0.0",
    "eslint-plugin-vue": "^1.0.0",
    "mocha": "^2.5.3",
    "vue": "^2.0.0-alpha.5",
    "webpack": "^1.13.1"
  },
  "directories": {},
  "dist": {
    "shasum": "de57d8dd7d619333c981867728f3e6fdf68982ff",
    "tarball": "https://registry.npmjs.org/babel-plugin-transform-vue-jsx/-/babel-plugin-transform-vue-jsx-3.4.3.tgz"
  },
  "files": [
    "index.js",
    "lib",
    "dist"
  ],
  "gitHead": "0e028b677abec450a3d8e36e1280d5133e5bc9d8",
  "homepage": "https://github.com/vuejs/babel-plugin-transform-vue-jsx#readme",
  "keywords": [
    "vue",
    "babel",
    "jsx"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "yyx990803",
      "email": "yyx990803@gmail.com"
    }
  ],
  "name": "babel-plugin-transform-vue-jsx",
  "optionalDependencies": {},
  "peerDependencies": {
    "babel-helper-vue-jsx-merge-props": "^2.0.0",
    "babel-plugin-syntax-jsx": "^6.8.0"
  },
  "readme": "# babel-plugin-transform-vue-jsx [![CircleCI](https://img.shields.io/circleci/project/vuejs/babel-plugin-transform-vue-jsx.svg?maxAge=2592000)](https://circleci.com/gh/vuejs/babel-plugin-transform-vue-jsx)\n\n> Babel plugin for Vue 2.0 JSX\n\n### Requirements\n\n- Assumes you are using Babel with a module bundler e.g. Webpack, because the spread merge helper is imported as a module to avoid duplication.\n\n- This is mutually exclusive with `babel-plugin-transform-react-jsx`.\n\n### Usage\n\n``` bash\nnpm install\\\n  babel-plugin-syntax-jsx\\\n  babel-plugin-transform-vue-jsx\\\n  babel-helper-vue-jsx-merge-props\\\n  babel-preset-es2015\\\n  --save-dev\n```\n\nIn your `.babelrc`:\n\n``` json\n{\n  \"presets\": [\"es2015\"],\n  \"plugins\": [\"transform-vue-jsx\"]\n}\n```\n\nThe plugin transpiles the following JSX:\n\n``` jsx\n<div id=\"foo\">{this.text}</div>\n```\n\nTo the following JavaScript:\n\n``` js\nh('div', {\n  attrs: {\n    id: 'foo'\n  }\n}, [this.text])\n```\n\nNote the `h` function, which is a shorthand for a Vue instance's `$createElement` method, must be in the scope where the JSX is. Since this method is passed to component render functions as the first argument, in most cases you'd do this:\n\n``` js\nVue.component('jsx-example', {\n  render (h) { // <-- h must be in scope\n    return <div id=\"foo\">bar</div>\n  }\n})\n```\n\n### `h` auto-injection\n\nStarting with version 3.4.0 we automatically inject `const h = this.$createElement` in any method and getter (not functions or arrow functions) declared in ES2015 syntax that has JSX so you can drop the `(h)` parameter.\n\n``` js\n\nVue.component('jsx-example', {\n  render () { // h will be injected\n    return <div id=\"foo\">bar</div>\n  },\n  myMethod: function () { // h will not be injected\n    return <div id=\"foo\">bar</div>\n  },\n  someOtherMethod: () => { // h will not be injected\n    return <div id=\"foo\">bar</div>\n  }\n})\n\n@Component\nclass App extends Vue {\n  get computed () { // h will be injected\n    return <div id=\"foo\">bar</div>\n  }\n}\n```\n\n### Difference from React JSX\n\nFirst, Vue 2.0's vnode format is different from React's. The second argument to the `createElement` call is a \"data object\" that accepts nested objects. Each nested object will be then processed by corresponding modules:\n\n``` js\nrender (h) {\n  return h('div', {\n    // Component props\n    props: {\n      msg: 'hi'\n    },\n    // normal HTML attributes\n    attrs: {\n      id: 'foo'\n    },\n    // DOM props\n    domProps: {\n      innerHTML: 'bar'\n    },\n    // Event handlers are nested under \"on\", though\n    // modifiers such as in v-on:keyup.enter are not\n    // supported. You'll have to manually check the\n    // keyCode in the handler instead.\n    on: {\n      click: this.clickHandler\n    },\n    // For components only. Allows you to listen to\n    // native events, rather than events emitted from\n    // the component using vm.$emit.\n    nativeOn: {\n      click: this.nativeClickHandler\n    },\n    // class is a special module, same API as `v-bind:class`\n    class: {\n      foo: true,\n      bar: false\n    },\n    // style is also same as `v-bind:style`\n    style: {\n      color: 'red',\n      fontSize: '14px'\n    },\n    // other special top-level properties\n    key: 'key',\n    ref: 'ref',\n    // assign the `ref` is used on elements/components with v-for\n    refInFor: true,\n    slot: 'slot'\n  })\n}\n```\n\nThe equivalent of the above in Vue 2.0 JSX is:\n\n``` jsx\nrender (h) {\n  return (\n    <div\n      // normal attributes or component props.\n      id=\"foo\"\n      // DOM properties are prefixed with `domProps`\n      domPropsInnerHTML=\"bar\"\n      // event listeners are prefixed with `on` or `nativeOn`\n      onClick={this.clickHandler}\n      nativeOnClick={this.nativeClickHandler}\n      // other special top-level properties\n      class={{ foo: true, bar: false }}\n      style={{ color: 'red', fontSize: '14px' }}\n      key=\"key\"\n      ref=\"ref\"\n      // assign the `ref` is used on elements/components with v-for\n      refInFor\n      slot=\"slot\">\n    </div>\n  )\n}\n```\n\n### Component Tip\n\nIf a custom element starts with lowercase, it will be treated as a string id and used to lookup a registered component. If it starts with uppercase, it will be treated as an identifier, which allows you to do:\n\n``` js\nimport Todo from './Todo.js'\n\nexport default {\n  render (h) {\n    return <Todo/> // no need to register Todo via components option\n  }\n}\n```\n\n### JSX Spread\n\nJSX spread is supported, and this plugin will intelligently merge nested data properties. For example:\n\n``` jsx\nconst data = {\n  class: ['b', 'c']\n}\nconst vnode = <div class=\"a\" {...data}/>\n```\n\nThe merged data will be:\n\n``` js\n{ class: ['a', 'b', 'c'] }\n```\n\n### Vue directives\n\nNote that almost all built-in Vue directives are not supported when using JSX, the sole exception being `v-show`, which can be used with the `v-show={value}` syntax. In most cases there are obvious programmatic equivalents, for example `v-if` is just a ternary expression, and `v-for` is just an `array.map()` expression, etc.\n\nFor custom directives, you can use the `v-name={value}` syntax. However, note that directive arguments and modifiers are not supported using this syntax. There are two workarounds:\n\n1. Pass everything as an object via `value`, e.g. `v-name={{ value, modifier: true }}`\n\n2. Use the raw vnode directive data format:\n\n``` js\nconst directives = [\n  { name: 'my-dir', value: 123, modifiers: { abc: true } }\n]\n\nreturn <div {...{ directives }}/>\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/babel-plugin-transform-vue-jsx.git"
  },
  "scripts": {
    "build": "webpack -p index.js dist/babel-plugin-transform-vue-jsx.min.js --target=web --output-library=babel-plugin-transform-vue-jsx --output-library-target=umd --module-bind 'js=babel-loader'",
    "dev": "cd example && webpack --watch",
    "lint": "eslint index.js",
    "prepublish": "npm run build",
    "test": "npm run lint && mocha --compilers js:babel-register"
  },
  "unpkg": "dist/babel-plugin-transform-vue-jsx.min.js",
  "version": "3.4.3"
}
