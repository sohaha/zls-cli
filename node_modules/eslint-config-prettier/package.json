{
  "_args": [
    [
      {
        "raw": "eslint-config-prettier@^1.7.0",
        "scope": null,
        "escapedName": "eslint-config-prettier",
        "name": "eslint-config-prettier",
        "rawSpec": "^1.7.0",
        "spec": ">=1.7.0 <2.0.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\eslint-config-rem"
    ]
  ],
  "_from": "eslint-config-prettier@>=1.7.0 <2.0.0",
  "_id": "eslint-config-prettier@1.7.0",
  "_inCache": true,
  "_location": "/eslint-config-prettier",
  "_nodeVersion": "4.6.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/eslint-config-prettier-1.7.0.tgz_1492582336473_0.0065780826844275"
  },
  "_npmUser": {
    "name": "lydell",
    "email": "simon.lydell@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "eslint-config-prettier@^1.7.0",
    "scope": null,
    "escapedName": "eslint-config-prettier",
    "name": "eslint-config-prettier",
    "rawSpec": "^1.7.0",
    "spec": ">=1.7.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eslint-config-rem"
  ],
  "_resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-1.7.0.tgz",
  "_shasum": "cda3ce22df1e852daa9370f1f3446e8b8a02ce44",
  "_shrinkwrap": null,
  "_spec": "eslint-config-prettier@^1.7.0",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\eslint-config-rem",
  "author": {
    "name": "Simon Lydell"
  },
  "bin": {
    "eslint-config-prettier-check": "bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/prettier/eslint-config-prettier/issues"
  },
  "dependencies": {
    "get-stdin": "^5.0.1"
  },
  "description": "Turns off all rules that are unnecessary or might conflict with Prettier.",
  "devDependencies": {
    "ava": "^0.19.1",
    "babel-eslint": "^7.2.2",
    "dedent": "^0.7.0",
    "eslint": "^3.19.0",
    "eslint-config-google": "^0.7.1",
    "eslint-plugin-flowtype": "^2.30.4",
    "eslint-plugin-prettier": "^2.0.1",
    "eslint-plugin-react": "^6.10.3",
    "prettier": "^1.1.0",
    "rimraf": "^2.6.1"
  },
  "directories": {},
  "dist": {
    "shasum": "cda3ce22df1e852daa9370f1f3446e8b8a02ce44",
    "tarball": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-1.7.0.tgz"
  },
  "files": [
    "bin/",
    "flowtype.js",
    "index.js",
    "react.js"
  ],
  "gitHead": "06b403f3d1b16e828883814b592e3b5f18cc174f",
  "homepage": "https://github.com/prettier/eslint-config-prettier#readme",
  "keywords": [
    "eslint",
    "eslintconfig",
    "prettier"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "lydell",
      "email": "simon.lydell@gmail.com"
    }
  ],
  "name": "eslint-config-prettier",
  "optionalDependencies": {},
  "peerDependencies": {
    "eslint": ">=3.14.1"
  },
  "readme": "# eslint-config-prettier [![Build Status][travis-badge]][travis]\n\nTurns off all rules that are unnecessary or might conflict with [Prettier].\n\nThis lets you use you favorite shareable config without letting its stylistic\nchoices get in the way when using Prettier.\n\nIntended to be used together with [eslint-plugin-prettier].\n\n## Installation\n\nFirst, install [eslint-plugin-prettier]. Follow the instructions over there.\n\nThen, install eslint-config-prettier:\n\n```\n$ npm install --save-dev eslint-config-prettier\n```\n\nFinally, add eslint-config-prettier to the \"extends\" array in your `.eslintrc.*`\nfile. Make sure to put it **last,** so it gets the chance to override other\nconfigs.\n\n```json\n{\n  \"extends\": [\n    \"prettier\"\n  ]\n}\n```\n\nA few ESLint plugins are supported as well:\n\n- [eslint-plugin-flowtype]\n- [eslint-plugin-react]\n\nAdd extra exclusions for the plugins you use like so:\n\n```json\n{\n  \"extends\": [\n    \"prettier\",\n    \"prettier/flowtype\",\n    \"prettier/react\"\n  ]\n}\n```\n\n## CLI helper tool\n\neslint-config-prettier also ships with a little CLI tool to help you check if\nyour configuration contains any rules that are unnecessary or conflict with\nPrettier.\n\nFirst, add a script for it to package.json:\n\n```json\n{\n  \"scripts\": {\n    \"eslint-check\": \"eslint --print-config .eslintrc.js | eslint-config-prettier-check\"\n  }\n}\n```\n\nThen run `npm run eslint-check`.\n\n(Swap out .eslintrc.js with the path to your config if needed.)\n\nExit codes:\n\n- 0: No problems found.\n- 1: Unexpected error.\n- 2: Conflicting rules found.\n- 3: Special rules only found.\n\n## Example configuration\n\n```json\n{\n  \"extends\": [\n    \"google\",\n    \"plugin:flowtype/recommended\",\n    \"plugin:react/recommended\",\n    \"prettier\",\n    \"prettier/flowtype\",\n    \"prettier/react\"\n  ],\n  \"plugins\": [\n    \"flowtype\",\n    \"react\",\n    \"prettier\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2016,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  \"env\": {\n    \"es6\": true,\n    \"node\": true\n  },\n  \"rules\": {\n    \"prettier/prettier\": \"error\"\n  }\n}\n```\n\n## Special rules\n\nThere a few rules that eslint-config-prettier disables that actually can be\nenabled in some cases.\n\n### [curly]\n\nIf a block (for example after `if`, `else`, `for` or `while`) contains only one\nstatement, JavaScript allows omitting the curly braces around that statement.\nThis rule enforces if or when those optional curly braces should be omitted.\n\nIf you use the `\"multi-line\"` or `\"multi-or-nest\"` option, the rule can conflict\nwith Prettier.\n\nFor example, the `\"multi-line\"` option allows this line:\n\n```js\nif (cart.items && cart.items[0] && cart.items[0].quantity === 0) updateCart(cart);\n```\n\nHowever, Prettier might consider the line too long and turn it into the\nfollowing, which the `\"multi-line\"` option does _not_ allow:\n\n```js\nif (cart.items && cart.items[0] && cart.items[0].quantity === 0)\n  updateCart(cart);\n```\n\nThe [eslint-config-airbnb] config includes `curly` with the `\"multi-line\"`\noption turned on by default. Since that config is very popular, it makes sense\nfor eslint-config-prettier to turn this rule off.\n\nIf you like this rule, it can be used just fine with Prettier as long as you\ndon’t use the `\"multi-line\"` or `\"multi-or-nest\"` option.\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"curly\": [\"error\", \"all\"]\n  }\n}\n```\n\n### [max-len]\n\nUsually, Prettier takes care of following a maximum line length automatically.\nHowever, there are cases where Prettier can’t do anything, such as for long\nstrings, regular expressions and comments. Those need to be split up by a human.\n\nIf you’d like to enforce an even stricter maximum line length policy than\nPrettier can provide automatically, you can enable this rule. Just remember to\nkeep `max-len`’s options and Prettier’s `printWidth` option in sync.\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"max-len\": [\"error\", {\"code\": 80, \"ignoreUrls\": true}]\n  }\n}\n```\n\n### [no-mixed-operators]\n\nThis rule forbids mixing certain operators, such as `&&` and `||`.\n\nFor example, the rule could warn about this line:\n\n```js\nvar foo = a + b * c;\n```\n\nThe rule suggests adding parentheses, like this:\n\n```js\nvar foo = a + (b * c);\n```\n\nHowever, Prettier removes many “unnecessary” parentheses, turning it back to:\n\n```js\nvar foo = a + b * c;\n```\n\nIf you want to use this rule with Prettier, you need to split the expression\ninto another variable:\n\n```js\nvar bar = b * c;\nvar foo = a + bar;\n```\n\nKeep in mind that Prettier prints _some_ “unnecessary” parentheses, though:\n\n```js\nvar foo = (a && b) || c;\n```\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-mixed-operators\": \"error\"\n  }\n}\n```\n\n### [quotes]\n\nIf you’d like to enforce the use of backticks rather than single or double\nquotes for strings, you can enable this rule. Otherwise, there’s no need to.\nJust remember to enable the `\"backtick\"` option!\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"quotes\": [\"error\", \"backtick\"]\n  }\n}\n```\n\n## Contributing\n\neslint-config-prettier has been tested with:\n\n- ESLint 3.19.0\n- prettier 1.1.0\n- eslint-plugin-flowtype 2.30.4\n- eslint-plugin-react 6.10.3\n\nHave new rules been added since those versions? Have we missed any rules? Is\nthere a plugin you would like to see exclusions for? Open an issue or a pull\nrequest!\n\nIf you’d like to add support for eslint-plugin-foobar, this is how you’d go\nabout it:\n\nFirst, create `foobar.js`:\n\n```js\n\"use strict\";\n\nmodule.exports = {\n  rules: {\n    \"foobar/some-rule\": \"off\"\n  }\n};\n```\n\nThen, create `test-lint/foobar.js`:\n\n```js\n/* eslint-disable quotes */\n\"use strict\";\n\n// prettier does not want spaces before the parentheses, but\n// eslint-config-foobar wants one.\nconsole.log ();\n```\n\n`test-lint/foobar.js` must fail when used with eslint-plugin-foobar and\neslint-plugin-prettier at the same time – until `\"prettier/foobar\"` is added to\nthe \"extends\" property of an ESLint config.\n\nFinally, you need to mention the plugin in several places:\n\n- Add `\"foobar.js\"` to the \"files\" field in `package.json`.\n- Make sure that at least one rule from eslint-plugin-foobar gets used in\n  `.eslintrc.base.js`.\n- Add it to the list of supported plugins, to the example config and to\n  Contributing section in `README.md`.\n\nWhen you’re done, run `npm test` to verify that you got it all right. It runs\nseveral other npm scripts:\n\n- `\"test:lint\"` makes sure that the files in `test-lint/` pass ESLint when\n  the exclusions from eslint-config-prettier are used. It also lints the code of\n  eslint-config-prettier itself.\n- `\"test:lint-verify-fail\"` is run by a test in `test/lint-verify-fail.js`.\n- `\"test:lint-rules\"` is run by a test in `test/rules.js`.\n- `\"test:ava\"` runs unit tests that check a number of things:\n  - That eslint-plugin-foobar is mentioned in all the places shown above.\n  - That no unknown rules are turned off. This helps catching typos, for\n    example.\n  - That the CLI works.\n- `\"test:cli-sanity\"` is a sanity check for the CLI.\n\n## License\n\n[MIT](LICENSE).\n\n[curly]: http://eslint.org/docs/rules/curly\n[eslint-config-airbnb]: https://www.npmjs.com/package/eslint-config-airbnb\n[eslint-plugin-flowtype]: https://github.com/gajus/eslint-plugin-flowtype\n[eslint-plugin-prettier]: https://github.com/not-an-aardvark/eslint-plugin-prettier\n[eslint-plugin-react]: https://github.com/yannickcr/eslint-plugin-react\n[max-len]: http://eslint.org/docs/rules/max-len\n[no-mixed-operators]: http://eslint.org/docs/rules/no-mixed-operators\n[Prettier]: https://github.com/prettier/prettier\n[quotes]: http://eslint.org/docs/rules/quotes\n[travis-badge]: https://travis-ci.org/prettier/eslint-config-prettier.svg?branch=master\n[travis]: https://travis-ci.org/prettier/eslint-config-prettier\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/prettier/eslint-config-prettier.git"
  },
  "scripts": {
    "test": "npm run test:lint && npm run test:ava && npm run test:cli-sanity",
    "test:ava": "ava",
    "test:cli-sanity": "eslint --print-config .eslintrc.js | ./bin/cli.js",
    "test:lint": "eslint .",
    "test:lint-rules": "eslint index.js --config test-config/.eslintrc.js --format json",
    "test:lint-verify-fail": "eslint test-lint/ --config .eslintrc.base.js --format json"
  },
  "version": "1.7.0"
}
