{
  "_args": [
    [
      {
        "raw": "shelljs@^0.7.7",
        "scope": null,
        "escapedName": "shelljs",
        "name": "shelljs",
        "rawSpec": "^0.7.7",
        "spec": ">=0.7.7 <0.8.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init"
    ]
  ],
  "_from": "shelljs@>=0.7.7 <0.8.0",
  "_id": "shelljs@0.7.7",
  "_inCache": true,
  "_location": "/shelljs",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/shelljs-0.7.7.tgz_1489041432003_0.056656441651284695"
  },
  "_npmUser": {
    "name": "nfischer",
    "email": "ntfschr@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "shelljs@^0.7.7",
    "scope": null,
    "escapedName": "shelljs",
    "name": "shelljs",
    "rawSpec": "^0.7.7",
    "spec": ">=0.7.7 <0.8.0",
    "type": "range"
  },
  "_requiredBy": [
    "/",
    "/eslint"
  ],
  "_resolved": "https://registry.npmjs.org/shelljs/-/shelljs-0.7.7.tgz",
  "_shasum": "b2f5c77ef97148f4b4f6e22682e10bba8667cff1",
  "_shrinkwrap": null,
  "_spec": "shelljs@^0.7.7",
  "_where": "S:\\SDK\\www\\Z\\zls.init",
  "bin": {
    "shjs": "./bin/shjs"
  },
  "bugs": {
    "url": "https://github.com/shelljs/shelljs/issues"
  },
  "contributors": [
    {
      "name": "Nate Fischer",
      "email": "ntfschr@gmail.com",
      "url": "https://github.com/nfischer"
    },
    {
      "name": "Brandon Freitag",
      "email": "freitagbr@gmail.com",
      "url": "https://github.com/freitagbr"
    }
  ],
  "dependencies": {
    "glob": "^7.0.0",
    "interpret": "^1.0.0",
    "rechoir": "^0.6.2"
  },
  "description": "Portable Unix shell commands for Node.js",
  "devDependencies": {
    "ava": "^0.16.0",
    "codecov": "^1.0.1",
    "coffee-script": "^1.10.0",
    "eslint": "^2.0.0",
    "eslint-config-airbnb-base": "^3.0.0",
    "eslint-plugin-import": "^1.11.1",
    "nyc": "^10.0.0",
    "shelljs-changelog": "^0.2.0",
    "shelljs-release": "^0.2.0",
    "shx": "^0.2.0",
    "travis-check-changes": "^0.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b2f5c77ef97148f4b4f6e22682e10bba8667cff1",
    "tarball": "https://registry.npmjs.org/shelljs/-/shelljs-0.7.7.tgz"
  },
  "engines": {
    "iojs": "*",
    "node": ">=0.11.0"
  },
  "files": [
    "commands.js",
    "global.js",
    "make.js",
    "plugin.js",
    "shell.js",
    "bin",
    "src"
  ],
  "gitHead": "95638cc773390920a446e383c40ed8104c7d211d",
  "homepage": "http://github.com/shelljs/shelljs",
  "keywords": [
    "shelljs",
    "bash",
    "unix",
    "shell",
    "makefile",
    "make",
    "jake",
    "synchronous"
  ],
  "license": "BSD-3-Clause",
  "main": "./shell.js",
  "maintainers": [
    {
      "name": "artur",
      "email": "arturadib@gmail.com"
    },
    {
      "name": "freitagbr",
      "email": "freitagbr@gmail.com"
    },
    {
      "name": "nfischer",
      "email": "ntfschr@gmail.com"
    }
  ],
  "name": "shelljs",
  "optionalDependencies": {},
  "readme": "# ShellJS - Unix shell commands for Node.js\n\n[![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg?style=flat-square)](https://gitter.im/shelljs/shelljs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Travis](https://img.shields.io/travis/shelljs/shelljs/master.svg?style=flat-square&label=unix)](https://travis-ci.org/shelljs/shelljs)\n[![AppVeyor](https://img.shields.io/appveyor/ci/shelljs/shelljs/master.svg?style=flat-square&label=windows)](https://ci.appveyor.com/project/shelljs/shelljs/branch/master)\n[![Codecov](https://img.shields.io/codecov/c/github/shelljs/shelljs/master.svg?style=flat-square&label=coverage)](https://codecov.io/gh/shelljs/shelljs)\n[![npm version](https://img.shields.io/npm/v/shelljs.svg?style=flat-square)](https://www.npmjs.com/package/shelljs)\n[![npm downloads](https://img.shields.io/npm/dm/shelljs.svg?style=flat-square)](https://www.npmjs.com/package/shelljs)\n\nShellJS is a portable **(Windows/Linux/OS X)** implementation of Unix shell\ncommands on top of the Node.js API. You can use it to eliminate your shell\nscript's dependency on Unix while still keeping its familiar and powerful\ncommands. You can also install it globally so you can run it from outside Node\nprojects - say goodbye to those gnarly Bash scripts!\n\nShellJS is proudly tested on every node release since `v0.11`!\n\nThe project is [unit-tested](http://travis-ci.org/shelljs/shelljs) and battle-tested in projects like:\n\n+ [PDF.js](http://github.com/mozilla/pdf.js) - Firefox's next-gen PDF reader\n+ [Firebug](http://getfirebug.com/) - Firefox's infamous debugger\n+ [JSHint](http://jshint.com) & [ESLint](http://eslint.org/) - popular JavaScript linters\n+ [Zepto](http://zeptojs.com) - jQuery-compatible JavaScript library for modern browsers\n+ [Yeoman](http://yeoman.io/) - Web application stack and development tool\n+ [Deployd.com](http://deployd.com) - Open source PaaS for quick API backend generation\n+ And [many more](https://npmjs.org/browse/depended/shelljs).\n\nIf you have feedback, suggestions, or need help, feel free to post in our [issue\ntracker](https://github.com/shelljs/shelljs/issues).\n\nThink ShellJS is cool? Check out some related projects in our [Wiki\npage](https://github.com/shelljs/shelljs/wiki)!\n\nUpgrading from an older version? Check out our [breaking\nchanges](https://github.com/shelljs/shelljs/wiki/Breaking-Changes) page to see\nwhat changes to watch out for while upgrading.\n\n## Command line use\n\nIf you just want cross platform UNIX commands, checkout our new project\n[shelljs/shx](https://github.com/shelljs/shx), a utility to expose `shelljs` to\nthe command line.\n\nFor example:\n\n```\n$ shx mkdir -p foo\n$ shx touch foo/bar.txt\n$ shx rm -rf foo\n```\n\n## A quick note about the docs\n\nFor documentation on all the latest features, check out our\n[README](https://github.com/shelljs/shelljs). To read docs that are consistent\nwith the latest release, check out [the npm\npage](https://www.npmjs.com/package/shelljs) or\n[shelljs.org](http://documentup.com/shelljs/shelljs).\n\n## Installing\n\nVia npm:\n\n```bash\n$ npm install [-g] shelljs\n```\n\n## Examples\n\n```javascript\nvar shell = require('shelljs');\n\nif (!shell.which('git')) {\n  shell.echo('Sorry, this script requires git');\n  shell.exit(1);\n}\n\n// Copy files to release dir\nshell.rm('-rf', 'out/Release');\nshell.cp('-R', 'stuff/', 'out/Release');\n\n// Replace macros in each .js file\nshell.cd('lib');\nshell.ls('*.js').forEach(function (file) {\n  shell.sed('-i', 'BUILD_VERSION', 'v0.1.2', file);\n  shell.sed('-i', /^.*REMOVE_THIS_LINE.*$/, '', file);\n  shell.sed('-i', /.*REPLACE_LINE_WITH_MACRO.*\\n/, shell.cat('macro.js'), file);\n});\nshell.cd('..');\n\n// Run external tool synchronously\nif (shell.exec('git commit -am \"Auto-commit\"').code !== 0) {\n  shell.echo('Error: Git commit failed');\n  shell.exit(1);\n}\n```\n\n## Global vs. Local\n\nWe no longer recommend using a global-import for ShellJS (i.e.\n`require('shelljs/global')`). While still supported for convenience, this\npollutes the global namespace, and should therefore only be used with caution.\n\nInstead, we recommend a local import (standard for npm packages):\n\n```javascript\nvar shell = require('shelljs');\nshell.echo('hello world');\n```\n\n<!-- DO NOT MODIFY BEYOND THIS POINT - IT'S AUTOMATICALLY GENERATED -->\n\n\n## Command reference\n\n\nAll commands run synchronously, unless otherwise stated.\nAll commands accept standard bash globbing characters (`*`, `?`, etc.),\ncompatible with the [node glob module](https://github.com/isaacs/node-glob).\n\nFor less-commonly used commands and features, please check out our [wiki\npage](https://github.com/shelljs/shelljs/wiki).\n\n\n### cat(file [, file ...])\n### cat(file_array)\n\nExamples:\n\n```javascript\nvar str = cat('file*.txt');\nvar str = cat('file1', 'file2');\nvar str = cat(['file1', 'file2']); // same as above\n```\n\nReturns a string containing the given file, or a concatenated string\ncontaining the files if more than one file is given (a new line character is\nintroduced between each file).\n\n\n### cd([dir])\nChanges to directory `dir` for the duration of the script. Changes to home\ndirectory if no argument is supplied.\n\n\n### chmod([options,] octal_mode || octal_string, file)\n### chmod([options,] symbolic_mode, file)\n\nAvailable options:\n\n+ `-v`: output a diagnostic for every file processed\n+ `-c`: like verbose but report only when a change is made\n+ `-R`: change files and directories recursively\n\nExamples:\n\n```javascript\nchmod(755, '/Users/brandon');\nchmod('755', '/Users/brandon'); // same as above\nchmod('u+x', '/Users/brandon');\nchmod('-R', 'a-w', '/Users/brandon');\n```\n\nAlters the permissions of a file or directory by either specifying the\nabsolute permissions in octal form or expressing the changes in symbols.\nThis command tries to mimic the POSIX behavior as much as possible.\nNotable exceptions:\n\n+ In symbolic modes, 'a-r' and '-r' are identical.  No consideration is\n  given to the umask.\n+ There is no \"quiet\" option since default behavior is to run silent.\n\n\n### cp([options,] source [, source ...], dest)\n### cp([options,] source_array, dest)\nAvailable options:\n\n+ `-f`: force (default behavior)\n+ `-n`: no-clobber\n+ `-u`: only copy if source is newer than dest\n+ `-r`, `-R`: recursive\n+ `-L`: follow symlinks\n+ `-P`: don't follow symlinks\n\nExamples:\n\n```javascript\ncp('file1', 'dir1');\ncp('-R', 'path/to/dir/', '~/newCopy/');\ncp('-Rf', '/tmp/*', '/usr/local/*', '/home/tmp');\ncp('-Rf', ['/tmp/*', '/usr/local/*'], '/home/tmp'); // same as above\n```\n\nCopies files.\n\n\n### pushd([options,] [dir | '-N' | '+N'])\n\nAvailable options:\n\n+ `-n`: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.\n\nArguments:\n\n+ `dir`: Makes the current working directory be the top of the stack, and then executes the equivalent of `cd dir`.\n+ `+N`: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n+ `-N`: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n\nExamples:\n\n```javascript\n// process.cwd() === '/usr'\npushd('/etc'); // Returns /etc /usr\npushd('+1');   // Returns /usr /etc\n```\n\nSave the current directory on the top of the directory stack and then cd to `dir`. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.\n\n### popd([options,] ['-N' | '+N'])\n\nAvailable options:\n\n+ `-n`: Suppresses the normal change of directory when removing directories from the stack, so that only the stack is manipulated.\n\nArguments:\n\n+ `+N`: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.\n+ `-N`: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.\n\nExamples:\n\n```javascript\necho(process.cwd()); // '/usr'\npushd('/etc');       // '/etc /usr'\necho(process.cwd()); // '/etc'\npopd();              // '/usr'\necho(process.cwd()); // '/usr'\n```\n\nWhen no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.\n\n### dirs([options | '+N' | '-N'])\n\nAvailable options:\n\n+ `-c`: Clears the directory stack by deleting all of the elements.\n\nArguments:\n\n+ `+N`: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.\n+ `-N`: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.\n\nDisplay the list of currently remembered directories. Returns an array of paths in the stack, or a single path if +N or -N was specified.\n\nSee also: pushd, popd\n\n\n### echo([options,] string [, string ...])\nAvailable options:\n\n+ `-e`: interpret backslash escapes (default)\n\nExamples:\n\n```javascript\necho('hello world');\nvar str = echo('hello world');\n```\n\nPrints string to stdout, and returns string with additional utility methods\nlike `.to()`.\n\n\n### exec(command [, options] [, callback])\nAvailable options (all `false` by default):\n\n+ `async`: Asynchronous execution. If a callback is provided, it will be set to\n  `true`, regardless of the passed value.\n+ `silent`: Do not echo program output to console.\n+ and any option available to Node.js's\n  [child_process.exec()](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n\nExamples:\n\n```javascript\nvar version = exec('node --version', {silent:true}).stdout;\n\nvar child = exec('some_long_running_process', {async:true});\nchild.stdout.on('data', function(data) {\n  /* ... do something with data ... */\n});\n\nexec('some_long_running_process', function(code, stdout, stderr) {\n  console.log('Exit code:', code);\n  console.log('Program output:', stdout);\n  console.log('Program stderr:', stderr);\n});\n```\n\nExecutes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\nmode, this returns a ShellString (compatible with ShellJS v0.6.x, which returns an object\nof the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\nobject, and the `callback` gets the arguments `(code, stdout, stderr)`.\n\nNot seeing the behavior you want? `exec()` runs everything through `sh`\nby default (or `cmd.exe` on Windows), which differs from `bash`. If you\nneed bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\n\n**Note:** For long-lived processes, it's best to run `exec()` asynchronously as\nthe current synchronous implementation uses a lot of CPU. This should be getting\nfixed soon.\n\n\n### find(path [, path ...])\n### find(path_array)\nExamples:\n\n```javascript\nfind('src', 'lib');\nfind(['src', 'lib']); // same as above\nfind('.').filter(function(file) { return file.match(/\\.js$/); });\n```\n\nReturns array of all files (however deep) in the given paths.\n\nThe main difference from `ls('-R', path)` is that the resulting file names\ninclude the base directories, e.g. `lib/resources/file1` instead of just `file1`.\n\n\n### grep([options,] regex_filter, file [, file ...])\n### grep([options,] regex_filter, file_array)\nAvailable options:\n\n+ `-v`: Inverse the sense of the regex and print the lines not matching the criteria.\n+ `-l`: Print only filenames of matching files\n\nExamples:\n\n```javascript\ngrep('-v', 'GLOBAL_VARIABLE', '*.js');\ngrep('GLOBAL_VARIABLE', '*.js');\n```\n\nReads input string from given files and returns a string containing all lines of the\nfile that match the given `regex_filter`.\n\n\n### head([{'-n': \\<num\\>},] file [, file ...])\n### head([{'-n': \\<num\\>},] file_array)\nAvailable options:\n\n+ `-n <num>`: Show the first `<num>` lines of the files\n\nExamples:\n\n```javascript\nvar str = head({'-n': 1}, 'file*.txt');\nvar str = head('file1', 'file2');\nvar str = head(['file1', 'file2']); // same as above\n```\n\nRead the start of a file.\n\n\n### ln([options,] source, dest)\nAvailable options:\n\n+ `-s`: symlink\n+ `-f`: force\n\nExamples:\n\n```javascript\nln('file', 'newlink');\nln('-sf', 'file', 'existing');\n```\n\nLinks source to dest. Use -f to force the link, should dest already exist.\n\n\n### ls([options,] [path, ...])\n### ls([options,] path_array)\nAvailable options:\n\n+ `-R`: recursive\n+ `-A`: all files (include files beginning with `.`, except for `.` and `..`)\n+ `-L`: follow symlinks\n+ `-d`: list directories themselves, not their contents\n+ `-l`: list objects representing each file, each with fields containing `ls\n        -l` output fields. See\n        [fs.Stats](https://nodejs.org/api/fs.html#fs_class_fs_stats)\n        for more info\n\nExamples:\n\n```javascript\nls('projs/*.js');\nls('-R', '/users/me', '/tmp');\nls('-R', ['/users/me', '/tmp']); // same as above\nls('-l', 'file.txt'); // { name: 'file.txt', mode: 33188, nlink: 1, ...}\n```\n\nReturns array of files in the given path, or in current directory if no path provided.\n\n\n### mkdir([options,] dir [, dir ...])\n### mkdir([options,] dir_array)\nAvailable options:\n\n+ `-p`: full path (will create intermediate dirs if necessary)\n\nExamples:\n\n```javascript\nmkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');\nmkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above\n```\n\nCreates directories.\n\n\n### mv([options ,] source [, source ...], dest')\n### mv([options ,] source_array, dest')\nAvailable options:\n\n+ `-f`: force (default behavior)\n+ `-n`: no-clobber\n\nExamples:\n\n```javascript\nmv('-n', 'file', 'dir/');\nmv('file1', 'file2', 'dir/');\nmv(['file1', 'file2'], 'dir/'); // same as above\n```\n\nMoves files.\n\n\n### pwd()\nReturns the current directory.\n\n\n### rm([options,] file [, file ...])\n### rm([options,] file_array)\nAvailable options:\n\n+ `-f`: force\n+ `-r, -R`: recursive\n\nExamples:\n\n```javascript\nrm('-rf', '/tmp/*');\nrm('some_file.txt', 'another_file.txt');\nrm(['some_file.txt', 'another_file.txt']); // same as above\n```\n\nRemoves files.\n\n\n### sed([options,] search_regex, replacement, file [, file ...])\n### sed([options,] search_regex, replacement, file_array)\nAvailable options:\n\n+ `-i`: Replace contents of 'file' in-place. _Note that no backups will be created!_\n\nExamples:\n\n```javascript\nsed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\nsed(/.*DELETE_THIS_LINE.*\\n/, '', 'source.js');\n```\n\nReads an input string from `files` and performs a JavaScript `replace()` on the input\nusing the given search regex and replacement string or function. Returns the new string after replacement.\n\nNote:\n\nLike unix `sed`, ShellJS `sed` supports capture groups. Capture groups are specified\nusing the `$n` syntax:\n\n```javascript\nsed(/(\\w+)\\s(\\w+)/, '$2, $1', 'file.txt');\n```\n\n\n### set(options)\nAvailable options:\n\n+ `+/-e`: exit upon error (`config.fatal`)\n+ `+/-v`: verbose: show all commands (`config.verbose`)\n+ `+/-f`: disable filename expansion (globbing)\n\nExamples:\n\n```javascript\nset('-e'); // exit upon first error\nset('+e'); // this undoes a \"set('-e')\"\n```\n\nSets global configuration variables\n\n\n### sort([options,] file [, file ...])\n### sort([options,] file_array)\nAvailable options:\n\n+ `-r`: Reverse the result of comparisons\n+ `-n`: Compare according to numerical value\n\nExamples:\n\n```javascript\nsort('foo.txt', 'bar.txt');\nsort('-r', 'foo.txt');\n```\n\nReturn the contents of the files, sorted line-by-line. Sorting multiple\nfiles mixes their content, just like unix sort does.\n\n\n### tail([{'-n': \\<num\\>},] file [, file ...])\n### tail([{'-n': \\<num\\>},] file_array)\nAvailable options:\n\n+ `-n <num>`: Show the last `<num>` lines of the files\n\nExamples:\n\n```javascript\nvar str = tail({'-n': 1}, 'file*.txt');\nvar str = tail('file1', 'file2');\nvar str = tail(['file1', 'file2']); // same as above\n```\n\nRead the end of a file.\n\n\n### tempdir()\n\nExamples:\n\n```javascript\nvar tmp = tempdir(); // \"/tmp\" for most *nix platforms\n```\n\nSearches and returns string containing a writeable, platform-dependent temporary directory.\nFollows Python's [tempfile algorithm](http://docs.python.org/library/tempfile.html#tempfile.tempdir).\n\n\n### test(expression)\nAvailable expression primaries:\n\n+ `'-b', 'path'`: true if path is a block device\n+ `'-c', 'path'`: true if path is a character device\n+ `'-d', 'path'`: true if path is a directory\n+ `'-e', 'path'`: true if path exists\n+ `'-f', 'path'`: true if path is a regular file\n+ `'-L', 'path'`: true if path is a symbolic link\n+ `'-p', 'path'`: true if path is a pipe (FIFO)\n+ `'-S', 'path'`: true if path is a socket\n\nExamples:\n\n```javascript\nif (test('-d', path)) { /* do something with dir */ };\nif (!test('-f', path)) continue; // skip if it's a regular file\n```\n\nEvaluates expression using the available primaries and returns corresponding value.\n\n\n### ShellString.prototype.to(file)\n\nExamples:\n\n```javascript\ncat('input.txt').to('output.txt');\n```\n\nAnalogous to the redirection operator `>` in Unix, but works with\nShellStrings (such as those returned by `cat`, `grep`, etc). _Like Unix\nredirections, `to()` will overwrite any existing file!_\n\n\n### ShellString.prototype.toEnd(file)\n\nExamples:\n\n```javascript\ncat('input.txt').toEnd('output.txt');\n```\n\nAnalogous to the redirect-and-append operator `>>` in Unix, but works with\nShellStrings (such as those returned by `cat`, `grep`, etc).\n\n\n### touch([options,] file [, file ...])\n### touch([options,] file_array)\nAvailable options:\n\n+ `-a`: Change only the access time\n+ `-c`: Do not create any files\n+ `-m`: Change only the modification time\n+ `-d DATE`: Parse DATE and use it instead of current time\n+ `-r FILE`: Use FILE's times instead of current time\n\nExamples:\n\n```javascript\ntouch('source.js');\ntouch('-c', '/path/to/some/dir/source.js');\ntouch({ '-r': FILE }, '/path/to/some/dir/source.js');\n```\n\nUpdate the access and modification times of each FILE to the current time.\nA FILE argument that does not exist is created empty, unless -c is supplied.\nThis is a partial implementation of *[touch(1)](http://linux.die.net/man/1/touch)*.\n\n\n### uniq([options,] [input, [output]])\nAvailable options:\n\n+ `-i`: Ignore case while comparing\n+ `-c`: Prefix lines by the number of occurrences\n+ `-d`: Only print duplicate lines, one for each group of identical lines\n\nExamples:\n\n```javascript\nuniq('foo.txt');\nuniq('-i', 'foo.txt');\nuniq('-cd', 'foo.txt', 'bar.txt');\n```\n\nFilter adjacent matching lines from input\n\n\n### which(command)\n\nExamples:\n\n```javascript\nvar nodeExec = which('node');\n```\n\nSearches for `command` in the system's PATH. On Windows, this uses the\n`PATHEXT` variable to append the extension if it's not already executable.\nReturns string containing the absolute path to the command.\n\n\n### exit(code)\nExits the current process with the given exit code.\n\n### error()\nTests if error occurred in the last command. Returns a truthy value if an\nerror returned and a falsy value otherwise.\n\n**Note**: do not rely on the\nreturn value to be an error message. If you need the last error message, use\nthe `.stderr` attribute from the last command's return value instead.\n\n\n### ShellString(str)\n\nExamples:\n\n```javascript\nvar foo = ShellString('hello world');\n```\n\nTurns a regular string into a string-like object similar to what each\ncommand returns. This has special methods, like `.to()` and `.toEnd()`\n\n\n### env['VAR_NAME']\nObject containing environment variables (both getter and setter). Shortcut\nto process.env.\n\n### Pipes\n\nExamples:\n\n```javascript\ngrep('foo', 'file1.txt', 'file2.txt').sed(/o/g, 'a').to('output.txt');\necho('files with o\\'s in the name:\\n' + ls().grep('o'));\ncat('test.js').exec('node'); // pipe to exec() call\n```\n\nCommands can send their output to another command in a pipe-like fashion.\n`sed`, `grep`, `cat`, `exec`, `to`, and `toEnd` can appear on the right-hand\nside of a pipe. Pipes can be chained.\n\n## Configuration\n\n\n### config.silent\n\nExample:\n\n```javascript\nvar sh = require('shelljs');\nvar silentState = sh.config.silent; // save old silent state\nsh.config.silent = true;\n/* ... */\nsh.config.silent = silentState; // restore old silent state\n```\n\nSuppresses all command output if `true`, except for `echo()` calls.\nDefault is `false`.\n\n### config.fatal\n\nExample:\n\n```javascript\nrequire('shelljs/global');\nconfig.fatal = true; // or set('-e');\ncp('this_file_does_not_exist', '/dev/null'); // throws Error here\n/* more commands... */\n```\n\nIf `true` the script will throw a Javascript error when any shell.js\ncommand encounters an error. Default is `false`. This is analogous to\nBash's `set -e`\n\n### config.verbose\n\nExample:\n\n```javascript\nconfig.verbose = true; // or set('-v');\ncd('dir/');\nls('subdir/');\n```\n\nWill print each command as follows:\n\n```\ncd dir/\nls subdir/\n```\n\n### config.globOptions\n\nExample:\n\n```javascript\nconfig.globOptions = {nodir: true};\n```\n\nUse this value for calls to `glob.sync()` instead of the default options.\n\n### config.reset()\n\nExample:\n\n```javascript\nvar shell = require('shelljs');\n// Make changes to shell.config, and do stuff...\n/* ... */\nshell.config.reset(); // reset to original state\n// Do more stuff, but with original settings\n/* ... */\n```\n\nReset shell.config to the defaults:\n\n```javascript\n{\n  fatal: false,\n  globOptions: {},\n  maxdepth: 255,\n  noglob: false,\n  silent: false,\n  verbose: false,\n}\n```\n\n## Team\n\n| [![Nate Fischer](https://avatars.githubusercontent.com/u/5801521?s=130)](https://github.com/nfischer) | [![Brandon Freitag](https://avatars1.githubusercontent.com/u/5988055?v=3&s=130)](http://github.com/freitagbr) |\n|:---:|:---:|\n| [Nate Fischer](https://github.com/nfischer) | [Brandon Freitag](http://github.com/freitagbr) |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/shelljs/shelljs.git"
  },
  "scripts": {
    "after-travis": "travis-check-changes",
    "changelog": "shelljs-changelog",
    "codecov": "codecov",
    "gendocs": "node scripts/generate-docs",
    "lint": "eslint .",
    "posttest": "npm run lint",
    "release:major": "shelljs-release major",
    "release:minor": "shelljs-release minor",
    "release:patch": "shelljs-release patch",
    "test": "nyc --reporter=text --reporter=lcov ava --serial test/*.js",
    "test-no-coverage": "ava --serial test/*.js"
  },
  "version": "0.7.7"
}
