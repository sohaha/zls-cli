{
  "_args": [
    [
      {
        "raw": "buffer-crc32@~0.2.3",
        "scope": null,
        "escapedName": "buffer-crc32",
        "name": "buffer-crc32",
        "rawSpec": "~0.2.3",
        "spec": ">=0.2.3 <0.3.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\yauzl"
    ]
  ],
  "_from": "buffer-crc32@>=0.2.3 <0.3.0",
  "_id": "buffer-crc32@0.2.13",
  "_inCache": true,
  "_location": "/buffer-crc32",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/buffer-crc32-0.2.13.tgz_1479778107033_0.1442455758806318"
  },
  "_npmUser": {
    "name": "brianloveswords",
    "email": "brianloveswords@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "buffer-crc32@~0.2.3",
    "scope": null,
    "escapedName": "buffer-crc32",
    "name": "buffer-crc32",
    "rawSpec": "~0.2.3",
    "spec": ">=0.2.3 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/yauzl"
  ],
  "_resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
  "_shasum": "0d333e3f00eac50aa1454abd30ef8c2a5d9a7242",
  "_shrinkwrap": null,
  "_spec": "buffer-crc32@~0.2.3",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\yauzl",
  "author": {
    "name": "Brian J. Brennan",
    "email": "brianloveswords@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/brianloveswords/buffer-crc32/issues"
  },
  "contributors": [
    {
      "name": "Vladimir Kuznetsov"
    }
  ],
  "dependencies": {},
  "description": "A pure javascript CRC32 algorithm that plays nice with binary data",
  "devDependencies": {
    "tap": "~0.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "0d333e3f00eac50aa1454abd30ef8c2a5d9a7242",
    "tarball": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz"
  },
  "engines": {
    "node": "*"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "e9b66c7356f4ea6f7c2f89d51160a1ef6117849f",
  "homepage": "https://github.com/brianloveswords/buffer-crc32",
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "brianloveswords",
      "email": "brian@nyhacker.org"
    }
  ],
  "name": "buffer-crc32",
  "optionalDependencies": {},
  "readme": "# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\n# install\n```\nnpm install buffer-crc32\n```\n\n# example\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00])\ncrc32(buf) // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf) // -> -1805997238\ncrc32.unsigned(buf) // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機') // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32('hey');\nvar partialCrc = crc32(' ', partialCrc);\nvar partialCrc = crc32('sup', partialCrc);\nvar partialCrc = crc32(' ', partialCrc);\nvar finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\nMIT/X11\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianloveswords/buffer-crc32.git"
  },
  "scripts": {
    "test": "tap tests/*.test.js"
  },
  "version": "0.2.13"
}
