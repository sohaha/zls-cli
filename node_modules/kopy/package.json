{
  "_args": [
    [
      {
        "raw": "kopy@^5.0.5",
        "scope": null,
        "escapedName": "kopy",
        "name": "kopy",
        "rawSpec": "^5.0.5",
        "spec": ">=5.0.5 <6.0.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init"
    ]
  ],
  "_from": "kopy@>=5.0.5 <6.0.0",
  "_id": "kopy@5.1.1",
  "_inCache": true,
  "_location": "/kopy",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/kopy-5.1.1.tgz_1493047471862_0.6637003424111754"
  },
  "_npmUser": {
    "name": "rem",
    "email": "0x142857@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "ansi-escapes": "1.4.0",
    "binary-extensions": "1.8.0",
    "chalk": "1.1.3",
    "cli-cursor": "1.0.2",
    "cli-width": "2.1.0",
    "escape-string-regexp": "1.0.5",
    "external-editor": "1.1.1",
    "is-promise": "2.1.0",
    "lodash": "4.17.4",
    "pinkie-promise": "2.0.1",
    "rx": "4.1.0",
    "strip-ansi": "3.0.1",
    "through": "2.3.8"
  },
  "_requested": {
    "raw": "kopy@^5.0.5",
    "scope": null,
    "escapedName": "kopy",
    "name": "kopy",
    "rawSpec": "^5.0.5",
    "spec": ">=5.0.5 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/kopy/-/kopy-5.1.1.tgz",
  "_shasum": "6294947b9148fda8fadb89f0cf16d4594c77dc95",
  "_shrinkwrap": null,
  "_spec": "kopy@^5.0.5",
  "_where": "S:\\SDK\\www\\Z\\zls.init",
  "author": {
    "name": "EGOIST",
    "email": "0x142857@gmail.com",
    "url": "github.com/egoist"
  },
  "ava": {
    "require": [
      "babel-register"
    ]
  },
  "bugs": {
    "url": "https://github.com/egoist/kopy/issues"
  },
  "dependencies": {
    "async.each": "^0.5.2",
    "inquirer": "^2.0.0",
    "is-binary-path": "^2.0.0",
    "jstransformer": "^1.0.0",
    "jstransformer-ejs": "^0.0.3",
    "metalsmith": "^2.2.0",
    "minimatch": "^3.0.3",
    "multimatch": "^2.1.0",
    "path-exists": "^3.0.0"
  },
  "description": "Gracefully copy a directory and render templates.",
  "devDependencies": {
    "ava": "latest",
    "babel-preset-stage-2": "^6.18.0",
    "bili": "0.10.0",
    "ejs": "^2.5.5",
    "eslint": "^3.9.1",
    "eslint-config-rem": "^2.0.0",
    "jstransformer-handlebars": "^1.0.0",
    "rimraf": "^2.5.4",
    "rollup-plugin-babel": "^2.7.1"
  },
  "directories": {},
  "dist": {
    "shasum": "6294947b9148fda8fadb89f0cf16d4594c77dc95",
    "tarball": "https://registry.npmjs.org/kopy/-/kopy-5.1.1.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "eslintConfig": {
    "extends": "rem/esnext"
  },
  "files": [
    "dist"
  ],
  "gitHead": "b083799e86339f9d845f3fb09422977f7ff905dc",
  "homepage": "https://github.com/egoist/kopy#readme",
  "keywords": [
    "copy",
    "dir",
    "folder"
  ],
  "license": "MIT",
  "main": "dist/kopy.common.js",
  "maintainers": [
    {
      "name": "rem",
      "email": "0x142857@gmail.com"
    }
  ],
  "name": "kopy",
  "optionalDependencies": {},
  "readme": "# kopy\n\n[![NPM version](https://img.shields.io/npm/v/kopy.svg?style=flat)](https://npmjs.com/package/kopy) [![NPM downloads](https://img.shields.io/npm/dm/kopy.svg?style=flat)](https://npmjs.com/package/kopy) [![Build Status](https://img.shields.io/circleci/project/egoist/kopy/master.svg?style=flat)](https://circleci.com/gh/egoist/kopy)\n\n> Gracefully copy a directory and render templates.\n\n## Why is this useful?\n\nThis could be used to build a scaffolding tool like [yeoman](https://github.com/yeoman/yeoman) or [vue-cli](https://github.com/vuejs/vue-cli).\n\n## Install\n\n```bash\n$ npm install --save kopy\n```\n\n## Usage\n\n```js\nconst copy = require('kopy')\n\ncopy('./template', './dest', {\n  data: {\n    foo: 'bar'\n  }\n}).then(({files}) => {\n  console.log(files) // array of filenames in './dest'\n}).catch(err => {\n  console.log(err.stack)\n})\n```\n\n## Template Syntax\n\nTemplates could use [ejs](http://ejs.co) syntax or any template engine supported by [jstransformer](https://github.com/jstransformers)\n\n## API\n\n### copy(src, dest, options)\n\nReturns a Promise which resolve `{files, data, answers, merged}`, `merged` is the result of answers of `answers` merged with `data`.\n\n#### src\n\nType: `string`<br>\nRequired: `true`\n\nSource directory. Could be a relative or absolute path.\n\n#### dest\n\nType: `string`<br>\nRequired: `true`\n\nDestination directory.\n\n#### options\n\n##### template\n\nType: `object`<br>\nDefault: `require('jstransformer-ejs')`\n\nYou can use a custom template engine, like [handlebars]:\n\n```js\ncopy(src, dest, {\n  template: require('jstransformer-handlebars')\n})\n```\n\n##### templateOptions\n\nType: `object`\n\nThe template engine options.\n\n##### clean\n\nType: `boolean`<br>\nDefault: `false`\n\nWhether to clean destination directory before writing to it.\n\n##### cwd\n\nType: `string`<br>\nDefault: `process.cwd()`\n\nCurrent working directory.\n\n##### data\n\nType: `object`<br>\nDefault: `undefined`\n\nThe data to render templates in source directory.\n\n##### prompts\n\nType: `Array<InquirerPrompt>`<br>\nDefault: `undefined`\n\n[inquirer](https://github.com/SBoudrias/Inquirer.js) prompts, the answers of prompts will be assigned to `data`\n\n\n##### skipInterpolation\n\nType: `string | Array<string> | function`<br>\nDefault: `undefined` (we skip all [binary files](https://github.com/sindresorhus/is-binary-path) by default)\n\nPatterns([minimatch](https://github.com/isaacs/minimatch#features)) used to skip interpolation, eg: `./foo*/bar-*.js`\n\nIt could also be a function, whose first arg is file path and second arg is file content, eg. we want to exclude all `.js` files:\n\n```js\ncopy(src, dest, {\n  skipInterpolation(file, content) {\n    return /\\.js$/.test(file)\n  }\n})\n```\n\n##### disableInterpolation\n\nType: `boolean`<br>\nDefault: `false`\n\nSimilar to `skipInterpolation`, but `disableInterpolation` disables all template interpolation, template markup will remain the way it is.\n\n##### filters\n\nType: `object`<br>\nDefault: `undefined`\n\nAn object containing file filter rules, the key of each entry is a minimatch pattern, and its value is a JavaScript expression evaluated in the context of (prompt answers) data:\n\n```js\ncopy(src, dest, {\n  filters: {\n    '**/*.js': 'useJavaScript',\n    '**/*.ts': '!useJavaScript'\n  }\n})\n```\n\n##### move\n\nType: `object`<br>\nDefault: `undefined`\n\nSimilar to `filters`, but instead of filtering files, it just renames the file:\n\n```js\ncopt(src, dest, {\n  move: {\n    'gitignore': '.gitignore',\n    'folder/file.js': 'another/file.ts'\n  }\n})\n```\n\n##### skipExisting\n\nType: `function` `boolean`<br>\nDefault: `undefined`\n\nWhether to skip existing file, it could be function that takes the path to existing file as argument.\n\n```js\ncopy(src, dest, {\n  skipExisting(file) {\n    console.log(`${file} exists, skipped!`)\n  }\n})\n```\n\n---\n\n**kopy** © [EGOIST](https://github.com/egoist), Released under the [MIT](https://egoist.mit-license.org/) License.<br>\nAuthored and maintained by EGOIST with help from contributors ([list](https://github.com/egoist/kopy/contributors)).\n\n> [egoistian.com](https://egoistian.com) · GitHub [@egoist](https://github.com/egoist) · Twitter [@rem_rin_rin](https://twitter.com/rem_rin_rin)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/egoist/kopy.git"
  },
  "scripts": {
    "build": "bili --js babel",
    "example": "npm run build && mkdir -p dist-example && cd dist-example && node ../example.js",
    "test": "NODE_ENV=test ava && eslint src/*.js && rm -rf test/dest && npm run build"
  },
  "version": "5.1.1",
  "watch": {
    "./src": [
      "build"
    ]
  }
}
