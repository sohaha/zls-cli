{
  "_args": [
    [
      {
        "raw": "pretty-format@^19.0.0",
        "scope": null,
        "escapedName": "pretty-format",
        "name": "pretty-format",
        "rawSpec": "^19.0.0",
        "spec": ">=19.0.0 <20.0.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\jest-validate"
    ]
  ],
  "_from": "pretty-format@>=19.0.0 <20.0.0",
  "_id": "pretty-format@19.0.0",
  "_inCache": true,
  "_location": "/pretty-format",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/pretty-format-19.0.0.tgz_1487669430940_0.7767606938723475"
  },
  "_npmUser": {
    "name": "cpojer",
    "email": "christoph.pojer@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {
    "color-convert": "1.9.0"
  },
  "_requested": {
    "raw": "pretty-format@^19.0.0",
    "scope": null,
    "escapedName": "pretty-format",
    "name": "pretty-format",
    "rawSpec": "^19.0.0",
    "spec": ">=19.0.0 <20.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jest-matcher-utils",
    "/jest-validate"
  ],
  "_resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-19.0.0.tgz",
  "_shasum": "56530d32acb98a3fa4851c4e2b9d37b420684c84",
  "_shrinkwrap": null,
  "_spec": "pretty-format@^19.0.0",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\jest-validate",
  "author": {
    "name": "James Kyle",
    "email": "me@thejameskyle.com"
  },
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {
    "ansi-styles": "^3.0.0"
  },
  "description": "Stringify any JavaScript value.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "56530d32acb98a3fa4851c4e2b9d37b420684c84",
    "tarball": "https://registry.npmjs.org/pretty-format/-/pretty-format-19.0.0.tgz"
  },
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "BSD-3-Clause",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "dmitriiabramov",
      "email": "dmitrii@rheia.us"
    },
    {
      "name": "thejameskyle",
      "email": "me@thejameskyle.com"
    }
  ],
  "name": "pretty-format",
  "optionalDependencies": {},
  "readme": "# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports [all built-in JavaScript types](#type-support)\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd) (similar performance to v8's `JSON.stringify` and significantly faster than Node's `util.format`)\n- Plugin system for extending with custom types (i.e. [`ReactTestComponent`](#reacttestcomponent-plugin))\n\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format');\n\nvar obj = { property: {} };\nobj.circularReference = obj;\nobj[Symbol('foo')] = 'foo';\nobj.map = new Map();\nobj.map.set('prop', 'value');\nobj.array = [1, NaN, Infinity];\n\nconsole.log(prettyFormat(obj));\n```\n\n**Result:**\n\n```js\nObject {\n  \"property\": Object {},\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\"\n  },\n  \"array\": Array [\n    1,\n    NaN,\n    Infinity\n  ],\n  Symbol(foo): \"foo\"\n}\n```\n\n#### Type Support\n\n`Object`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`, `arguments`, `Boolean`, `Date`, `Error`, `Function`, `Infinity`, `Map`, `NaN`, `null`, `Number`, `RegExp`, `Set`, `String`, `Symbol`, `undefined`, `WeakMap`, `WeakSet`\n\n### API\n\n```js\nconsole.log(prettyFormat(object));\nconsole.log(prettyFormat(object, options));\n```\n\nOptions:\n\n* **`callToJSON`**<br>\n  Type: `boolean`, default: `true`<br>\n  Call `toJSON()` on passed object.\n* **`indent`**<br>\n  Type: `number`, default: `2`<br>\n  Number of spaces for indentation.\n* **`maxDepth`**<br>\n  Type: `number`, default: `Infinity`<br>\n  Print only this number of levels.\n* **`min`**<br>\n  Type: `boolean`, default: `false`<br>\n  Print without whitespace.\n* **`plugins`**<br>\n  Type: `array`, default: `[]`<br>\n  Plugins (see the next section).\n* **`printFunctionName`**<br>\n  Type: `boolean`, default: `true`<br>\n  Print function names or just `[Function]`.\n* **`escapeRegex`**<br>\n  Type: `boolean`, default: `false`<br>\n  Escape special characters in regular expressions.\n* **`highlight`**<br>\n  Type: `boolean`, default: `false`<br>\n  Highlight syntax for terminal (works only with `ReactTestComponent` and `ReactElement` plugins.\n* **`theme`**<br>\n  Type: `object`, default: `{tag: 'cyan', content: 'reset'...}`<br>\n  Syntax highlight theme.<br>\n  Uses [ansi-styles colors](https://github.com/chalk/ansi-styles#colors) + `reset` for no color.<br>\n  Available types: `tag`, `content`, `prop` and `value`.\n\n### Plugins\n\nPretty format also supports adding plugins:\n\n```js\nconst fooPlugin = {\n  test(val) {\n    return val && val.hasOwnProperty('foo');\n  },\n  print(val, print, indent) {\n    return 'Foo: ' + print(val.foo);\n  }\n};\n\nconst obj = {foo: {bar: {}}};\n\nprettyFormat(obj, {\n  plugins: [fooPlugin]\n});\n// Foo: Object {\n//   \"bar\": Object {}\n// }\n```\n\n#### `ReactTestComponent` and `ReactElement` plugins\n\n```js\nconst prettyFormat = require('pretty-format');\nconst reactTestPlugin = require('pretty-format/build/plugins/ReactTestComponent');\nconst reactElementPlugin = require('pretty-format/build/plugins/ReactElement');\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n\nconst element = React.createElement('h1', null, 'Hello World');\n\nprettyFormat(renderer.create(element).toJSON(), {\n  plugins: [reactTestPlugin, reactElementPlugin]\n});\n// <h1>\n//   Hello World\n// </h1>\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git"
  },
  "scripts": {},
  "version": "19.0.0"
}
