{
  "_args": [
    [
      {
        "raw": "exec-series@^1.0.0",
        "scope": null,
        "escapedName": "exec-series",
        "name": "exec-series",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\bin-build"
    ]
  ],
  "_from": "exec-series@>=1.0.0 <2.0.0",
  "_id": "exec-series@1.0.3",
  "_inCache": true,
  "_location": "/exec-series",
  "_nodeVersion": "6.3.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/exec-series-1.0.3.tgz_1468258048915_0.0962953690905124"
  },
  "_npmUser": {
    "name": "shinnn",
    "email": "snnskwtnb@gmail.com"
  },
  "_npmVersion": "3.10.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "exec-series@^1.0.0",
    "scope": null,
    "escapedName": "exec-series",
    "name": "exec-series",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/bin-build"
  ],
  "_resolved": "https://registry.npmjs.org/exec-series/-/exec-series-1.0.3.tgz",
  "_shasum": "6d257a9beac482a872c7783bc8615839fc77143a",
  "_shrinkwrap": null,
  "_spec": "exec-series@^1.0.0",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\bin-build",
  "author": {
    "name": "Shinnosuke Watanabe",
    "url": "https://github.com/shinnn"
  },
  "bugs": {
    "url": "https://github.com/shinnn/exec-series/issues"
  },
  "dependencies": {
    "async-each-series": "^1.1.0",
    "object-assign": "^4.1.0"
  },
  "description": "Run commands in order",
  "devDependencies": {
    "@shinnn/eslint-config-node-legacy": "^2.0.0",
    "eslint": "^3.0.1",
    "istanbul": "^0.4.4",
    "rimraf": "^2.5.3",
    "tap-spec": "^4.1.1",
    "tape": "^4.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "6d257a9beac482a872c7783bc8615839fc77143a",
    "tarball": "https://registry.npmjs.org/exec-series/-/exec-series-1.0.3.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "cd2cb2d3d08bdae005ca4bc2535b85f5559e3b2e",
  "homepage": "https://github.com/shinnn/exec-series#readme",
  "keywords": [
    "child_process",
    "exec",
    "series",
    "serial",
    "serially",
    "command",
    "sequence",
    "sequential",
    "sequentially",
    "order"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "shinnn",
      "email": "snnskwtnb@gmail.com"
    }
  ],
  "name": "exec-series",
  "optionalDependencies": {},
  "readme": "# exec-series\n\n[![NPM version](https://img.shields.io/npm/v/exec-series.svg)](https://www.npmjs.com/package/exec-series)\n[![Build Status](https://travis-ci.org/shinnn/exec-series.svg?branch=master)](https://travis-ci.org/shinnn/exec-series)\n[![Build status](https://ci.appveyor.com/api/projects/status/bi4pflltlq5368ym?svg=true)](https://ci.appveyor.com/project/ShinnosukeWatanabe/exec-series)\n[![Coverage Status](https://img.shields.io/coveralls/shinnn/exec-series.svg)](https://coveralls.io/r/shinnn/exec-series)\n[![Dependency Status](https://david-dm.org/shinnn/exec-series.svg)](https://david-dm.org/shinnn/exec-series)\n[![devDependency Status](https://david-dm.org/shinnn/exec-series/dev-status.svg)](https://david-dm.org/shinnn/exec-series#info=devDependencies)\n\nA [Node](https://nodejs.org/) module to run commands in order\n\n```javascript\nconst execSeries = require('exec-series');\n\nexecSeries(['echo \"foo\"', 'echo \"bar\"'], (err, stdouts, stderrs) => {\n  if (err) {\n    throw err;\n  }\n\n  console.log(stdouts); // yields: ['foo\\n', 'bar\\n']\n  console.log(stderrs); // yields: ['', '']\n});\n```\n\nOn Linux, you can do almost the same thing with [`&&`](http://tldp.org/LDP/abs/html/list-cons.html#LISTCONSREF) operator like below:\n\n```javascript\nconst {exec} = require('child_process');\n\nexec('echo \"foo\" && echo \"bar\"', (err, stdout, stderr) => {\n  //...\n});\n```\n\nHowever, some environments, such as [Windows PowerShell](https://connect.microsoft.com/PowerShell/feedback/details/778798/implement-the-and-operators-that-bash-has), don't support `&&` operator. This module helps you to [create a cross-platform Node program](https://gist.github.com/domenic/2790533).\n\n## Installation\n\n[Use npm.](https://docs.npmjs.com/cli/install)\n\n```\nnpm install exec-series\n```\n\n## API\n\n```javascript\nconst execSeries = require('exec-series');\n```\n\n### execSeries(*commands* [, *options*, *callback*])\n\n*commands*: `Array` of `String` (the commands to run)  \n*options*: `Object` ([child_process.exec][exec] options with `maxBuffer` defaulting to 10 MB)  \n*callback*: `Function`\n\nIt sequentially runs the commands using [child_process.exec][exec]. If the first command has finished successfully, the second command will run, and so on.\n\nAfter the last command has finished, it runs the callback function.\n\nWhen one of the commands fails, it immediately calls the callback function and the rest of the commands won't be run.\n\n#### callback(*error*, *stdoutArray*, *stderrArray*)\n\n*error*: `Error` if one of the commands fails, otherwise `undefined`  \n*stdoutArray*: `Array` of `String` (stdout of the commands)  \n*stderrArray*: `Array` of `String` (stderr of the commands)\n\n```javascript\nexecSeries([\n  'mkdir foo',\n  'echo bar',\n  'exit 200',\n  'mkdir baz'\n], (err, stdouts, stderrs) => {\n  err.code; //=> 200\n  stdouts; //=> ['', 'bar\\n', '']\n  stderrs; //=> ['', '', '']\n  \n  fs.statSync('foo').isDirectory; //=> true\n  fs.statSync('baz'); // throw an error\n});\n```\n\nCallback function is optional.\n\n```javascript\nexecSeries(['mkdir foo', 'mkdir bar']);\n\nsetTimeout(() => {\n  fs.statSync('foo').isDirectory(); //=> true\n  fs.statSync('bar').isDirectory(); //=> true\n}, 1000);\n```\n\n## License\n\nCopyright (c) 2014 - 2016 [Shinnosuke Watanabe](https://github.com/shinnn)\n\nLicensed under [the MIT License](./LICENSE).\n\n[exec]: https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/shinnn/exec-series.git"
  },
  "scripts": {
    "coverage": "node --strong_mode  node_modules/.bin/istanbul cover test.js",
    "coveralls": "${npm_package_scripts_coverage} && istanbul-coveralls",
    "pretest": "eslint --fix --config @shinnn/node-legacy index.js test.js",
    "test": "node --strong_mode test.js | tap-spec"
  },
  "version": "1.0.3"
}
