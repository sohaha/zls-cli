{
  "_args": [
    [
      {
        "raw": "stat-mode@^0.2.0",
        "scope": null,
        "escapedName": "stat-mode",
        "name": "stat-mode",
        "rawSpec": "^0.2.0",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\metalsmith"
    ]
  ],
  "_from": "stat-mode@>=0.2.0 <0.3.0",
  "_id": "stat-mode@0.2.2",
  "_inCache": true,
  "_location": "/stat-mode",
  "_nodeVersion": "4.4.5",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/stat-mode-0.2.2.tgz_1473101340561_0.20689093857072294"
  },
  "_npmUser": {
    "name": "tootallnate",
    "email": "nathan@tootallnate.net"
  },
  "_npmVersion": "2.15.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stat-mode@^0.2.0",
    "scope": null,
    "escapedName": "stat-mode",
    "name": "stat-mode",
    "rawSpec": "^0.2.0",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/metalsmith"
  ],
  "_resolved": "https://registry.npmjs.org/stat-mode/-/stat-mode-0.2.2.tgz",
  "_shasum": "e6c80b623123d7d80cf132ce538f346289072502",
  "_shrinkwrap": null,
  "_spec": "stat-mode@^0.2.0",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\metalsmith",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net",
    "url": "http://n8.io/"
  },
  "bugs": {
    "url": "https://github.com/TooTallNate/stat-mode/issues"
  },
  "dependencies": {},
  "description": "Offers convenient getters and setters for the stat `mode`",
  "devDependencies": {
    "mocha": "^3.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e6c80b623123d7d80cf132ce538f346289072502",
    "tarball": "https://registry.npmjs.org/stat-mode/-/stat-mode-0.2.2.tgz"
  },
  "gitHead": "c5fda09e051af3b314d18a72d41571f548da3700",
  "homepage": "https://github.com/TooTallNate/stat-mode",
  "keywords": [
    "stat",
    "mode",
    "owner",
    "group",
    "others",
    "chmod",
    "octal",
    "symbolic",
    "permissions"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    }
  ],
  "name": "stat-mode",
  "optionalDependencies": {},
  "readme": "stat-mode\n=========\n### Offers convenient getters and setters for the stat `mode`\n[![Build Status](https://travis-ci.org/TooTallNate/stat-mode.svg?branch=master)](https://travis-ci.org/TooTallNate/stat-mode)\n\nYou know that `mode` property on the `fs.Stat` object that you probably\nusually just ignore? Well there's acutally a lot of information packed\ninto that number.\n\nThe specific information includes:\n\n * What the [\"file type\"](http://en.wikipedia.org/wiki/Unix_file_types) of file it is\n * Whether or not the [`setuid` and `setgid` bits](http://en.wikipedia.org/wiki/Setuid) are set\n * Whether or not the [`sticky` bit](http://en.wikipedia.org/wiki/Sticky_bit) is set\n * The [_read_, _write_, and _execute_ permissions for the _owner_, _group_ and _others_](http://en.wikipedia.org/wiki/File_system_permissions)\n\nThis module helps you extract that information.\n\nAll the getters are also setters, which change the `mode` property\nappropriately. This is useful for when you have to build up your\nown `fs.Stat` object for whatever reason (like when implementing a\nFUSE filesystem.\n\n\nInstallation\n------------\n\n``` bash\n$ npm install stat-mode\n```\n\n\nExample\n-------\n\nSo given some arbitrary file (let's say `/bin/echo`):\n\n``` bash\n$ ls -l /bin/echo\n-rwxr-xr-x 1 root wheel 14128 Aug 11  2013 /bin/echo\n```\n\nWe can inspect it using the `fs.stat()` call and creating a `Mode` instance\non top of it.\n\n``` javascript\nvar fs = require('fs');\nvar Mode = require('stat-mode');\n\nfs.stat('/bin/echo', function (err, stat) {\n  if (err) throw err;\n\n  // create a \"Mode\" instance on top of the `stat` object\n  var mode = new Mode(stat);\n\n  // you can check what kind of file it is:\n  mode.isDirectory();\n  // false\n\n  mode.isFIFO();\n  // false\n\n  mode.isFile();\n  // true\n\n\n  // and you can also check individual owner, group and others permissions\n  mode.owner.read;\n  // true\n\n  mode.owner.write;\n  // true\n\n  mode.owner.execute;\n  // true\n\n  mode.group.read;\n  // true\n\n  mode.group.write;\n  // false\n\n  mode.group.execute;\n  // true\n\n  mode.others.read;\n  // true\n\n  mode.others.write;\n  // false\n\n  mode.others.execute;\n  // true\n\n\n  // the `toString()` output resembes the `ls -l` output:\n  mode.toString();\n  // '-rwxr-xr-x'\n});\n```\n\n\nAPI\n---\n\n### new Mode(Object stat) → Mode\n\nYou must pass in \"stat\" object to the `Mode` constructor. The \"stat\"\nobject can be a real `fs.Stat` instance, or really any Object with a\n`mode` property.\n\n#### mode.isDirectory([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"directory\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"directory\".\n\n#### mode.isFile([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"file\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"file\".\n\n#### mode.isBlockDevice([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"block device\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"block device\".\n\n#### mode.isCharacterDevice([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"character device\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"character\ndevice\".\n\n#### mode.isSymbolicLink([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"symbolic link\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"symbolic link\".\n\n#### mode.isFIFO([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"FIFO\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"FIFO\".\n\n#### mode.isSocket([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"socket\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"socket\".\n\n#### mode.owner.read → Boolean [Getter/Setter]\n\n`true` if the mode is \"owner read\" rights, `false` otherwise.\n\n#### mode.owner.write → Boolean [Getter/Setter]\n\n`true` if the mode is \"owner write\" rights, `false` otherwise.\n\n#### mode.owner.execute → Boolean [Getter/Setter]\n\n`true` if the mode is \"owner execute\" rights, `false` otherwise.\n\n#### mode.group.read → Boolean [Getter/Setter]\n\n`true` if the mode is \"group read\" rights, `false` otherwise.\n\n#### mode.group.write → Boolean [Getter/Setter]\n\n`true` if the mode is \"group write\" rights, `false` otherwise.\n\n#### mode.group.execute → Boolean [Getter/Setter]\n\n`true` if the mode is \"group execute\" rights, `false` otherwise.\n\n#### mode.others.read → Boolean [Getter/Setter]\n\n`true` if the mode is \"others read\" rights, `false` otherwise.\n\n#### mode.others.write → Boolean [Getter/Setter]\n\n`true` if the mode is \"others write\" rights, `false` otherwise.\n\n#### mode.others.execute → Boolean [Getter/Setter]\n\n`true` if the mode is \"others execute\" rights, `false` otherwise.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/stat-mode.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "0.2.2"
}
