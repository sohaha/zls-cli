{
  "_args": [
    [
      {
        "raw": "event-emitter@~0.3.5",
        "scope": null,
        "escapedName": "event-emitter",
        "name": "event-emitter",
        "rawSpec": "~0.3.5",
        "spec": ">=0.3.5 <0.4.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\es6-map"
    ]
  ],
  "_from": "event-emitter@>=0.3.5 <0.4.0",
  "_id": "event-emitter@0.3.5",
  "_inCache": true,
  "_location": "/event-emitter",
  "_nodeVersion": "7.7.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/event-emitter-0.3.5.tgz_1489591870304_0.5845511830411851"
  },
  "_npmUser": {
    "name": "medikoo",
    "email": "medikoo+npm@medikoo.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "event-emitter@~0.3.5",
    "scope": null,
    "escapedName": "event-emitter",
    "name": "event-emitter",
    "rawSpec": "~0.3.5",
    "spec": ">=0.3.5 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/es6-map",
    "/es6-set"
  ],
  "_resolved": "https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz",
  "_shasum": "df8c69eef1647923c7157b9ce83840610b02cc39",
  "_shrinkwrap": null,
  "_spec": "event-emitter@~0.3.5",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\es6-map",
  "author": {
    "name": "Mariusz Nowak",
    "email": "medyk@medikoo.com",
    "url": "http://www.medikoo.com/"
  },
  "bugs": {
    "url": "https://github.com/medikoo/event-emitter/issues"
  },
  "dependencies": {
    "d": "1",
    "es5-ext": "~0.10.14"
  },
  "description": "Environment agnostic event emitter",
  "devDependencies": {
    "tad": "~0.2.7",
    "xlint": "~0.2.2",
    "xlint-jslint-medikoo": "~0.1.4"
  },
  "directories": {},
  "dist": {
    "shasum": "df8c69eef1647923c7157b9ce83840610b02cc39",
    "tarball": "https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz"
  },
  "gitHead": "b951397b8f0d55fc7ae8aea7fa7699e48132a53d",
  "homepage": "https://github.com/medikoo/event-emitter#readme",
  "keywords": [
    "event",
    "events",
    "trigger",
    "observer",
    "listener",
    "emitter",
    "pubsub"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "medikoo",
      "email": "medikoo+npm@medikoo.com"
    }
  ],
  "name": "event-emitter",
  "optionalDependencies": {},
  "readme": "# event-emitter\n## Environment agnostic event emitter\n\n### Installation\n\n\t$ npm install event-emitter\n\nTo port it to Browser or any other (non CJS) environment, use your favorite CJS bundler. No favorite yet? Try: [Browserify](http://browserify.org/), [Webmake](https://github.com/medikoo/modules-webmake) or [Webpack](http://webpack.github.io/)\n\n### Usage\n\n```javascript\nvar ee = require('event-emitter');\n\nvar MyClass = function () { /* .. */ };\nee(MyClass.prototype); // All instances of MyClass will expose event-emitter interface\n\nvar emitter = new MyClass(), listener;\n\nemitter.on('test', listener = function (args) {\n  // … react to 'test' event\n});\n\nemitter.once('test', function (args) {\n  // … react to first 'test' event (invoked only once!)\n});\n\nemitter.emit('test', arg1, arg2/*…args*/); // Two above listeners invoked\nemitter.emit('test', arg1, arg2/*…args*/); // Only first listener invoked\n\nemitter.off('test', listener);              // Removed first listener\nemitter.emit('test', arg1, arg2/*…args*/); // No listeners invoked\n```\n### Additional utilities\n\n#### allOff(obj) _(event-emitter/all-off)_\n\nRemoves all listeners from given event emitter object\n\n#### hasListeners(obj[, name]) _(event-emitter/has-listeners)_\n\nWhether object has some listeners attached to the object.\nWhen `name` is provided, it checks listeners for specific event name\n\n```javascript\nvar emitter = ee();\nvar hasListeners = require('event-emitter/has-listeners');\nvar listener = function () {};\n\nhasListeners(emitter); // false\n\nemitter.on('foo', listener);\nhasListeners(emitter); // true\nhasListeners(emitter, 'foo'); // true\nhasListeners(emitter, 'bar'); // false\n\nemitter.off('foo', listener);\nhasListeners(emitter, 'foo'); // false\n```\n\n#### pipe(source, target[, emitMethodName]) _(event-emitter/pipe)_\n\nPipes all events from _source_ emitter onto _target_ emitter (all events from _source_ emitter will be emitted also on _target_ emitter, but not other way).  \nReturns _pipe_ object which exposes `pipe.close` function. Invoke it to close configured _pipe_.  \nIt works internally by redefinition of `emit` method, if in your interface this method is referenced differently, provide its name (or symbol) with third argument.\n\n#### unify(emitter1, emitter2) _(event-emitter/unify)_\n\nUnifies event handling for two objects. Events emitted on _emitter1_ would be also emitted on _emitter2_, and other way back.  \nNon reversible.\n\n```javascript\nvar eeUnify = require('event-emitter/unify');\n\nvar emitter1 = ee(), listener1, listener3;\nvar emitter2 = ee(), listener2, listener4;\n\nemitter1.on('test', listener1 = function () { });\nemitter2.on('test', listener2 = function () { });\n\nemitter1.emit('test'); // Invoked listener1\nemitter2.emit('test'); // Invoked listener2\n\nvar unify = eeUnify(emitter1, emitter2);\n\nemitter1.emit('test'); // Invoked listener1 and listener2\nemitter2.emit('test'); // Invoked listener1 and listener2\n\nemitter1.on('test', listener3 = function () { });\nemitter2.on('test', listener4 = function () { });\n\nemitter1.emit('test'); // Invoked listener1, listener2, listener3 and listener4\nemitter2.emit('test'); // Invoked listener1, listener2, listener3 and listener4\n```\n\n### Tests [![Build Status](https://travis-ci.org/medikoo/event-emitter.png)](https://travis-ci.org/medikoo/event-emitter)\n\n\t$ npm test\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/medikoo/event-emitter.git"
  },
  "scripts": {
    "lint": "node node_modules/xlint/bin/xlint --linter=node_modules/xlint-jslint-medikoo/index.js --no-cache --no-stream",
    "lint-console": "node node_modules/xlint/bin/xlint --linter=node_modules/xlint-jslint-medikoo/index.js --watch",
    "test": "node ./node_modules/tad/bin/tad"
  },
  "version": "0.3.5"
}
