{
  "_args": [
    [
      {
        "raw": "cac@^3.0.3",
        "scope": null,
        "escapedName": "cac",
        "name": "cac",
        "rawSpec": "^3.0.3",
        "spec": ">=3.0.3 <4.0.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\yarn-install"
    ]
  ],
  "_from": "cac@>=3.0.3 <4.0.0",
  "_id": "cac@3.0.4",
  "_inCache": true,
  "_location": "/cac",
  "_nodeVersion": "7.0.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/cac-3.0.4.tgz_1479919036758_0.7764126188121736"
  },
  "_npmUser": {
    "name": "rem",
    "email": "0x142857@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {
    "map-obj": "1.0.1"
  },
  "_requested": {
    "raw": "cac@^3.0.3",
    "scope": null,
    "escapedName": "cac",
    "name": "cac",
    "rawSpec": "^3.0.3",
    "spec": ">=3.0.3 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/yarn-install"
  ],
  "_resolved": "https://registry.npmjs.org/cac/-/cac-3.0.4.tgz",
  "_shasum": "6d24ceec372efe5c9b798808bc7f49b47242a4ef",
  "_shrinkwrap": null,
  "_spec": "cac@^3.0.3",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\yarn-install",
  "author": {
    "name": "egoist",
    "email": "0x142857@gmail.com",
    "url": "github.com/egoist"
  },
  "bili": {
    "transforms": {
      "dangerousForOf": true
    }
  },
  "bugs": {
    "url": "https://github.com/egoist/cac/issues"
  },
  "dependencies": {
    "camelcase-keys": "^3.0.0",
    "chalk": "^1.1.3",
    "indent-string": "^3.0.0",
    "minimist": "^1.2.0",
    "read-pkg-up": "^1.0.1",
    "suffix": "^0.1.0",
    "text-table": "^0.2.0"
  },
  "description": "Command & Conquer, the command-line queen.",
  "devDependencies": {
    "nswatch": "^0.1.0",
    "xo": "latest"
  },
  "directories": {},
  "dist": {
    "shasum": "6d24ceec372efe5c9b798808bc7f49b47242a4ef",
    "tarball": "https://registry.npmjs.org/cac/-/cac-3.0.4.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "dist"
  ],
  "gitHead": "e123c81a292b8ff129d2c6de3f4e387dd0bea4f1",
  "homepage": "https://github.com/egoist/cac#readme",
  "kanpai": {
    "test": "test2"
  },
  "keywords": [
    "cli",
    "commander",
    "yargs",
    "args",
    "meow",
    "minimist"
  ],
  "license": "MIT",
  "main": "dist/cac.common.js",
  "maintainers": [
    {
      "name": "kchan",
      "email": "kchanzen@gmail.com"
    },
    {
      "name": "rem",
      "email": "0x142857@gmail.com"
    }
  ],
  "name": "cac",
  "optionalDependencies": {},
  "readme": "# cac [![NPM version](https://img.shields.io/npm/v/cac.svg)](https://npmjs.com/package/cac) [![NPM downloads](https://img.shields.io/npm/dm/cac.svg)](https://npmjs.com/package/cac) [![Build Status](https://img.shields.io/circleci/project/egoist/cac/master.svg)](https://circleci.com/gh/egoist/cac)\n\n**C**ommand **A**nd **C**onquer, the queen living in your command line.\n\n<img src=\"http://i.giphy.com/v3FeH4swox9mg.gif\" width=\"400\"/>\n\n## Install\n\n```bash\n$ npm install --save cac\n```\n\n## Usage\n\n```js\nconst cac = require('cac')\n\n// initialize your cli program\nconst cli = cac()\n\n// add your very first command\ncli.command('hi', 'Say hi!', (input) => {\n  console.log(`hi ${input[0] || 'boy'}!`)\n})\n\n// parse arguments and bootstrap\ncli.parse()\n```\n\n<img src=\"./media/preview-1.jpg\" width=\"400\" />\n\n### Default commands and options\n\n- Options: `--help` `-h` `--version` `-v`\n- Commands: `help`\n\n<img src=\"./media/preview-2.jpg\" width=\"400\" />\n \n## API\n\n### .option(options, description, defaultValue)\n\n- **options**: `string`, it could be `option` or `option, alias` or `alias, option`, the order does not matter. eg: `.option('install, i')`\n- **description**: `string`, option description, will be used to output cli usage\n- **defaultValue**: `any`, give a default value to this option\n\n### .command(commands, description, fn)\n\n- **commands**: `string`, it could be `command` or `command, alias` or `alias, command`, the order does not matter. eg: `.command('clone, c')`. It can also be a wildcard symbol `*`, which means always been triggered if no command was specified by user.\n- **description**: `string`, command description, will be used to output cli usage\n- **fn**: `function`, command function, will be triggered when this command matches user's input, the function takes two arguments:\n  - *input*: non-flag arguments\n  - *flags*: flags converted to camelCase\n\n### .usage(text)\n\n- **text**: `string`, the cli usage. default is `$bin [options] [commands]`\n\n### .parse(argv)\n\n- **argv**: `array`, default is `process.argv.slice(2)`\n\n### .onError(handleError)\n\n- **handleError**: `function`, triggered when your program throws an error or was rejected by a Promise call.\n\n### .string(string | array)\n\na string or array of strings argument names to always treat as strings\n\n### .boolean(boolean | string | array)\n\na boolean, string or array of strings to always treat as booleans. if true will treat all double hyphenated arguments without equal signs as boolean (e.g. affects --foo, not -f or --foo=bar)\n\n### .example(text)\n\nAdd an example command for your command, will be shown in CLI usage.\n\n## License\n\nMIT Â© [egoist](https://github.com/egoist)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/egoist/cac.git"
  },
  "scripts": {
    "build": "bili",
    "dev": "bili --watch",
    "test": "xo src/index.js",
    "test2": "npm run build && npm test"
  },
  "version": "3.0.4",
  "watch": {
    "./src": [
      "build"
    ]
  },
  "xo": {
    "semicolon": false,
    "space": 2,
    "rules": {
      "xo/no-process-exit": 0,
      "unicorn/no-process-exit": 0,
      "import/no-dynamic-require": 0
    }
  }
}
