{
  "_args": [
    [
      {
        "raw": "jsx-ast-utils@^1.3.4",
        "scope": null,
        "escapedName": "jsx-ast-utils",
        "name": "jsx-ast-utils",
        "rawSpec": "^1.3.4",
        "spec": ">=1.3.4 <2.0.0",
        "type": "range"
      },
      "S:\\SDK\\www\\Z\\zls.init\\node_modules\\eslint-plugin-react"
    ]
  ],
  "_from": "jsx-ast-utils@>=1.3.4 <2.0.0",
  "_id": "jsx-ast-utils@1.4.1",
  "_inCache": true,
  "_location": "/jsx-ast-utils",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/jsx-ast-utils-1.4.1.tgz_1492627284870_0.34522004006430507"
  },
  "_npmUser": {
    "name": "evcohen",
    "email": "ethanvcohen@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jsx-ast-utils@^1.3.4",
    "scope": null,
    "escapedName": "jsx-ast-utils",
    "name": "jsx-ast-utils",
    "rawSpec": "^1.3.4",
    "spec": ">=1.3.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eslint-plugin-react"
  ],
  "_resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-1.4.1.tgz",
  "_shasum": "3867213e8dd79bf1e8f2300c0cfc1efb182c0df1",
  "_shrinkwrap": null,
  "_spec": "jsx-ast-utils@^1.3.4",
  "_where": "S:\\SDK\\www\\Z\\zls.init\\node_modules\\eslint-plugin-react",
  "author": {
    "name": "Ethan Cohen"
  },
  "bugs": {
    "url": "https://github.com/evcohen/jsx-ast-utils/issues"
  },
  "dependencies": {},
  "description": "AST utility module for statically analyzing JSX",
  "devDependencies": {
    "acorn-jsx": "^3.0.1",
    "babel-cli": "^6.14.0",
    "babel-core": "^6.14.0",
    "babel-eslint": "^7.0.0",
    "babel-jest": "^19.0.0",
    "babel-polyfill": "^6.16.0",
    "babel-preset-es2015": "^6.14.0",
    "coveralls": "^2.11.8",
    "eslint": "^3.12.1",
    "eslint-config-airbnb-base": "^11.1.0",
    "eslint-plugin-import": "^2.2.0",
    "jest": "^19.0.0",
    "rimraf": "^2.5.2"
  },
  "directories": {},
  "dist": {
    "shasum": "3867213e8dd79bf1e8f2300c0cfc1efb182c0df1",
    "tarball": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-1.4.1.tgz"
  },
  "engines": {
    "node": ">=4.0"
  },
  "gitHead": "c055fab1eee3b5180a905d20cf56f6062c1ba5b5",
  "homepage": "https://github.com/evcohen/jsx-ast-utils#readme",
  "jest": {
    "coverageReporters": [
      "lcov"
    ],
    "coverageDirectory": "reports",
    "testPathIgnorePatterns": [
      "/node_modules/",
      "helper.js"
    ]
  },
  "keywords": [
    "jsx",
    "ast",
    "lint",
    "eslint"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "evcohen",
      "email": "ethanvcohen@gmail.com"
    }
  ],
  "name": "jsx-ast-utils",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <a href=\"https://travis-ci.org/evcohen/jsx-ast-utils\">\n    <img src=\"https://api.travis-ci.org/evcohen/jsx-ast-utils.svg?branch=master\"\n         alt=\"build status\">\n  </a>\n  <a href=\"https://npmjs.org/package/jsx-ast-utils\">\n    <img src=\"https://img.shields.io/npm/v/jsx-ast-utils.svg\"\n         alt=\"npm version\">\n  </a>\n  <a href=\"https://github.com/evcohen/jsx-ast-utils/blob/master/LICENSE.md\">\n    <img src=\"https://img.shields.io/npm/l/jsx-ast-utils.svg\"\n         alt=\"license\">\n  </a>\n  <a href='https://coveralls.io/github/evcohen/jsx-ast-utils?branch=master'>\n    <img src='https://coveralls.io/repos/github/evcohen/jsx-ast-utils/badge.svg?branch=master' alt='Coverage Status' />\n  </a>\n  <a href='https://npmjs.org/package/jsx-ast-utils'>\n    <img src='https://img.shields.io/npm/dt/jsx-ast-utils.svg'\n    alt='Total npm downloads' />\n  </a>\n</p>\n\n# jsx-ast-utils\n\nAST utility module for statically analyzing JSX.\n\n## Installation\n```sh\n$ npm i jsx-ast-utils --save\n```\n\n## Usage\nThis is a utility module to evaluate AST objects for JSX syntax. This can be super useful when writing linting rules for JSX code. It was originally in the code for [eslint-plugin-jsx-a11y](https://github.com/evcohen/eslint-plugin-jsx-a11y), however I thought it could be useful to be extracted and maintained separately so **you** could write new interesting rules to statically analyze JSX.\n\n### ESLint example\n```js\nimport { hasProp } from 'jsx-ast-utils';\n// OR: var hasProp = require('jsx-ast-utils').hasProp;\n// OR: const hasProp = require('jsx-ast-utils/hasProp');\n// OR: import hasProp from 'jsx-ast-utils/hasProp';\n\nmodule.exports = context => ({\n  JSXOpeningElement: node => {\n    const onChange = hasProp(node.attributes, 'onChange');\n\n    if (onChange) {\n      context.report({\n        node,\n        message: `No onChange!`\n      });\n    }\n  }\n});\n```\n\n## API\n### AST Resources\n1. [JSX spec](https://github.com/facebook/jsx/blob/master/AST.md)\n2. [JS spec](https://github.com/estree/estree/blob/master/spec.md)\n\n### hasProp\n```js\nhasProp(props, prop, options);\n```\nReturns boolean indicating whether an prop exists as an attribute on a JSX element node.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nString - A string representation of the prop you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n  1. `ignoreCase` - automatically set to `true`.\n  2. `spreadStrict` - automatically set to `true`. This means if spread operator exists in\n     props, it will assume the prop you are looking for is not in the spread.\n     Example: `<div {...props} />` looking for specific prop here will return false if `spreadStrict` is `true`.\n\n<hr />\n\n### hasAnyProp\n\n```js\nhasAnyProp(props, prop, options);\n```\nReturns a boolean indicating if **any** of props in `prop` argument exist on the node.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nArray<String> - An array of strings representing the props you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n  1. `ignoreCase` - automatically set to `true`.\n  2. `spreadStrict` - automatically set to `true`. This means if spread operator exists in\n     props, it will assume the prop you are looking for is not in the spread.\n     Example: `<div {...props} />` looking for specific prop here will return false if `spreadStrict` is `true`.\n\n<hr />\n\n### hasEveryProp\n\n```js\nhasEveryProp(props, prop, options);\n```\nReturns a boolean indicating if **all** of props in `prop` argument exist on the node.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nArray<String> - An array of strings representing the props you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n 1. `ignoreCase` - automatically set to `true`.\n 2. `spreadStrict` - automatically set to `true`. This means if spread operator exists in\n    props, it will assume the prop you are looking for is not in the spread.\n    Example: `<div {...props} />` looking for specific prop here will return false if `spreadStrict` is `true`.\n\n<hr />\n\n### getProp\n\n```js\ngetProp(props, prop, options);\n```\nReturns the JSXAttribute itself or undefined, indicating the prop is not present on the JSXOpeningElement.\n\n#### Props\nObject - The attributes on the visited node. (Usually `node.attributes`).\n#### Prop\nString - A string representation of the prop you want to check for existence.\n#### Options\nObject - An object representing options for existence checking\n  1. `ignoreCase` - automatically set to `true`.\n\n<hr />\n\n### elementType\n```js\nelementType(node)\n```\nReturns the tagName associated with a JSXElement.\n\n#### Node\nObject - The visited JSXElement node object.\n\n<hr />\n\n### getPropValue\n\n```js\ngetPropValue(prop);\n```\nReturns the value of a given attribute. Different types of attributes have their associated values in different properties on the object.\n\nThis function should return the most *closely* associated value with the intention of the JSX.\n\n#### Prop\nObject - The JSXAttribute collected by AST parser.\n\n<hr />\n\n### getLiteralPropValue\n\n```js\ngetLiteralPropValue(prop);\n```\nReturns the value of a given attribute. Different types of attributes have their associated values in different properties on the object.\n\nThis function should return a value only if we can extract a literal value from its attribute (i.e. values that have generic types in JavaScript - strings, numbers, booleans, etc.)\n\n#### Prop\nObject - The JSXAttribute collected by AST parser.\n\n<hr />\n\n### propName\n\n```js\npropName(prop);\n```\nReturns the name associated with a JSXAttribute. For example, given `<div foo=\"bar\" />` and the JSXAttribute for `foo`, this will return the string `\"foo\"`.\n\n#### Prop\nObject - The JSXAttribute collected by AST parser.\n\n### eventHandlers\n\n```js\nconsole.log(eventHandlers);\n/*\n[\n  'onCopy',\n  'onCut',\n  'onPaste',\n  'onCompositionEnd',\n  'onCompositionStart',\n  'onCompositionUpdate',\n  'onKeyDown',\n  'onKeyPress',\n  'onKeyUp',\n  'onFocus',\n  'onBlur',\n  'onChange',\n  'onInput',\n  'onSubmit',\n  'onClick',\n  'onContextMenu',\n  'onDblClick',\n  'onDoubleClick',\n  'onDrag',\n  'onDragEnd',\n  'onDragEnter',\n  'onDragExit',\n  'onDragLeave',\n  'onDragOver',\n  'onDragStart',\n  'onDrop',\n  'onMouseDown',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseOut',\n  'onMouseOver',\n  'onMouseUp',\n  'onSelect',\n  'onTouchCancel',\n  'onTouchEnd',\n  'onTouchMove',\n  'onTouchStart',\n  'onScroll',\n  'onWheel',\n  'onAbort',\n  'onCanPlay',\n  'onCanPlayThrough',\n  'onDurationChange',\n  'onEmptied',\n  'onEncrypted',\n  'onEnded',\n  'onError',\n  'onLoadedData',\n  'onLoadedMetadata',\n  'onLoadStart',\n  'onPause',\n  'onPlay',\n  'onPlaying',\n  'onProgress',\n  'onRateChange',\n  'onSeeked',\n  'onSeeking',\n  'onStalled',\n  'onSuspend',\n  'onTimeUpdate',\n  'onVolumeChange',\n  'onWaiting',\n  'onLoad',\n  'onError',\n  'onAnimationStart',\n  'onAnimationEnd',\n  'onAnimationIteration',\n  'onTransitionEnd',\n]\n*/\n```\n\nContains a flat list of common event handler props used in JSX to attach behaviors\nto DOM events.\n\n#### eventHandlersByType\n\nThe same list as `eventHandlers`, grouped into types.\n\n```js\nconsole.log(eventHandlersByType);\n/*\n{\n  clipboard: [ 'onCopy', 'onCut', 'onPaste' ],\n  composition: [ 'onCompositionEnd', 'onCompositionStart', 'onCompositionUpdate' ],\n  keyboard: [ 'onKeyDown', 'onKeyPress', 'onKeyUp' ],\n  focus: [ 'onFocus', 'onBlur' ],\n  form: [ 'onChange', 'onInput', 'onSubmit' ],\n  mouse: [ 'onClick', 'onContextMenu', 'onDblClick', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp' ],\n  selection: [ 'onSelect' ],\n  touch: [ 'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart' ],\n  ui: [ 'onScroll' ],\n  wheel: [ 'onWheel' ],\n  media: [ 'onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onError', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting' ],\n  image: [ 'onLoad', 'onError' ],\n  animation: [ 'onAnimationStart', 'onAnimationEnd', 'onAnimationIteration' ],\n  transition: [ 'onTransitionEnd' ],\n}\n*/\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/evcohen/jsx-ast-utils.git"
  },
  "scripts": {
    "build": "rimraf lib && babel src --out-dir lib",
    "coveralls": "cat ./reports/lcov.info | coveralls",
    "lint": "eslint  --config .eslintrc .",
    "lint:fix": "npm run lint -- --fix",
    "prepublish": "npm run lint && npm run test && npm run build",
    "pretest": "npm run lint",
    "test": "jest --coverage",
    "test:watch": "npm test -- --watch"
  },
  "version": "1.4.1"
}
