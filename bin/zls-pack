#!/usr/bin/env node

const chalk = require('chalk');
const meow = require('meow');
const chokidar = require('chokidar');
const AppError = require('../lib/app-error');
const { getConfigFile } = require('../lib/utils');
const loadConfig = require('../lib/load-config');
const defaultOptions = require('../lib/default-options');
let browserState = false;
const cli = meow(`
  ${chalk.bold('Options:')}
    ${chalk.yellow('--dev, -d')}        ${chalk.dim('Pack in development mode')}
    ${chalk.yellow('--watch, -w')}      ${chalk.dim('Pack in watch mode')}
    ${chalk.yellow('--config, -c')}     ${chalk.dim('Load config file')}
    ${chalk.yellow('--dist')}           ${chalk.dim('Custom dist directory')}
    ${chalk.yellow('--eslint, -e')}     ${chalk.dim('Add ESLint support')}
    ${chalk.yellow('--analyzer, -a')}     ${chalk.dim('Add Analyzer support')}
    ${chalk.yellow('--port, -p')}       ${chalk.dim('Port of dev server')}
    ${chalk.yellow('--open, -o')}       ${chalk.dim('Open browser')}
    ${chalk.yellow('--help, -h')}       ${chalk.dim('Output help (You are here!)')}
    ${chalk.yellow('--version, -v')}    ${chalk.dim('Output version')}

  ${chalk.bold('Commands:')}
    ${chalk.yellow('pack')}        ${chalk.dim('Pack your Vue app (default command)')}
    ${chalk.yellow('init')}        ${chalk.dim('Initialize an empty project')}

  ${chalk.bold('To see the help for specific command, you can run:')}
    ${chalk.yellow('zls [command] --help')}
\t`, {
  booleanDefault: undefined,
  flags: {
    help: {
      alias: 'h'
    },
    dev: {
      alias: 'd'
    },
    config: {
      alias: 'c'
    },
    open: {
      alias: 'o'
    },
    port: {
      alias: 'p'
    },
    version: {
      alias: 'v'
    },
    watch: {
      alias: 'w'
    },
    eslint: {
      alias: 'e'
    },
    analyzer: {
      alias: 'a'
    }
  }
});

const cliOptions = Object.assign({
  cli: true // indicates calling from CLI so that in `dev` mode when'll make server listen on a port
}, cli.flags);

if (cli.input[0]) {
  cliOptions.entry = cliOptions.entry || cli.input[0];
}

const main = require('../lib');
const start = (options, defaultOpt, warnTip = '') => {
  const result = main(options, defaultOpt, function (stats, options) {
    const { host, port, dev, watch, target } = options;
    if (dev && !watch) {
      if (stats.hasErrors()) {
        console.log(stats.toString('errors-only'));
        console.log();
        console.log(chalk.bgRed.black(' ERROR '), 'Compiling failed!');
      } else if (stats.hasWarnings()) {
        // console.log(stats.compilation.warnings)
        console.log(stats.toString('minimal'));
      } else {

        if (warnTip) {
          console.warn(`${chalk.bgYellow.black(' WARN ')} ${warnTip}`);
        }

        if (target === 'electron-renderer') {
          console.log(chalk.bold(`\n> Open Electron in another tab\n`));
        } else {
          console.log(chalk.bold(`${chalk.bgCyan.white(' Local ')} http://localhost:${port}\n`));
        }
        // console.log(chalk.bgGreen.black(' DONE '), 'Compiled successfully!')
      }
    }
  });

  const { host, port, openBrowser } = result.options;
  const { server, devMiddleWare } = result;
  if (server) {
    server.listen(port, host, () => {
      if (openBrowser && !browserState) {
        browserState = true;
        const _host = (host === '0.0.0.0') ? '127.0.0.1' : host;
        require('opn')(`http://${_host}:${port}`).catch(e=>{});
      }
    }).on('error', err => {
      if (err.code === 'EADDRINUSE') {
        return handleError(new AppError(`Port ${port} is already in use.\n\nYou can use another one by adding \`--port <port>\` or set it in config file.`));
      }
      handleError(err);
    });
  }

  if (options.dev || options.watch) {
    const configFile = getConfigFile(options.config);
    if (configFile) {
      let watcher = chokidar.watch(configFile);

      watcher.on('change', filename => {
        if (!result) {
          return;
        }

        if (server) {
          server.close();
          devMiddleWare.close();
        }

        if (result.watcher) {
          result.watcher.close();
        }

        if (watcher) {
          watcher.close();
          watcher = null;
        }

        console.log(`> Detect changes from ${chalk.yellow(filename)}, restarting...\n`);

        getStart();
      });
    }
  }
};

try {
  getStart();
}
catch ( err ) {
  handleError(err);
}

function getStart() {
  let defaultOpt = defaultOptions();
  let userConfig = loadConfig(cliOptions, defaultOpt);
  let options = Object.assign(defaultOpt, userConfig, cliOptions);

  if (options.dev) {
    const getPort = require('get-port');
    getPort({ port: options.port, host: options.host }).then(port => {
      let warnTip = '';
      if (options.port !== port) {
        warnTip = `Port ${options.port} has been used, switched to ${port}.\n`;
        options.port = port;
      }
      start(options, defaultOpt, warnTip);
    });
  } else {
    start(options, defaultOpt);
  }
}

function handleError(err) {
  process.stdout.write('\x1Bc');
  console.error(`${chalk.bgRed.black(' ERROR ')} Something went wrong during the build:\n`);
  if (err.name === 'AppError') {
    console.error(chalk.red(err.message));
  } else {
    console.error(err.stack);
  }
  console.log();
  process.exit(1);
}
