#!/usr/bin/env node

const chalk = require('chalk')
const meow = require('meow')
const chokidar = require('chokidar')
const AppError = require('../lib/app-error')
const { getConfigFile } = require('../lib/utils')

const cli = meow(`
  ${chalk.bold('Options:')}
    ${chalk.yellow('--dev, -d')}        ${chalk.dim('Pack in development mode')}
    ${chalk.yellow('--watch, -w')}      ${chalk.dim('Pack in watch mode')}
    ${chalk.yellow('--config, -c')}     ${chalk.dim('Load config file')}
    ${chalk.yellow('--dist')}           ${chalk.dim('Custom dist directory')}
    ${chalk.yellow('--eslint, -e')}     ${chalk.dim('Add ESLint support')}
    ${chalk.yellow('--analyzer, -a')}     ${chalk.dim('Add Analyzer support')}
    ${chalk.yellow('--port, -p')}       ${chalk.dim('Port of dev server')}
    ${chalk.yellow('--open, -o')}       ${chalk.dim('Open browser')}
    ${chalk.yellow('--help, -h')}       ${chalk.dim('Output help (You are here!)')}
    ${chalk.yellow('--version, -v')}    ${chalk.dim('Output version')}

  ${chalk.bold('Commands:')}
    ${chalk.yellow('pack')}        ${chalk.dim('Pack your Vue app (default command)')}
    ${chalk.yellow('init')}        ${chalk.dim('Initialize an empty project')}

  ${chalk.bold('To see the help for specific command, you can run:')}
    ${chalk.yellow('zls [command] --help')}
\t`, {
  booleanDefault: undefined,
  flags: {
    help: {
      alias: 'h'
    },
    dev: {
      alias: 'd'
    },
    config: {
      alias: 'c'
    },
    open: {
      alias: 'o'
    },
    port: {
      alias: 'p'
    },
    version: {
      alias: 'v'
    },
    watch: {
      alias: 'w'
    },
    eslint: {
      alias: 'e'
    },
    analyzer: {
      alias: 'a'
    }
  }
})

const options = Object.assign({
  cli: true // indicates calling from CLI so that in `dev` mode when'll make server listen on a port
}, cli.flags)

if (cli.input[0]) {
  options.entry = options.entry || cli.input[0]
}

const main = require('../lib')

const start = () => {

  const result = main(options)

  const { host, port, open } = result.options
  const { server, devMiddleWare } = result

  if (server) {
    server.listen(port, host, () => {
      if (open) {
        require('opn')(`http://${host}:${port}`)
      }
    })
          .on('error', err => {
            if (err.code === 'EADDRINUSE') {
              return handleError(new AppError(`Port ${port} is already in use.\n\nYou can use another one by adding \`--port <port>\` or set it in config file.`))
            }
            handleError(err)
          })
  }

  // watch config file
  if (options.dev || options.watch) {
    const configFile = getConfigFile(options.config)
    if (configFile) {
      let watcher = chokidar.watch(configFile)

      watcher.on('change', filename => {
        if (!result) {
          return
        }

        // server in dev mode
        if (server) {
          server.close()
          devMiddleWare.close()
        }

        // watcher for webpack in watch mode
        if (result.watcher) {
          result.watcher.close()
        }

        // watcher for config file
        if (watcher) {
          watcher.close()
          watcher = null
        }

        console.log(`> Detect changes from ${chalk.yellow(filename)}, restarting...\n`)
        start()
      })
    }
  }
}

try {
  start()
}
catch ( err ) {
  handleError(err)
}

function handleError(err) {
  process.stdout.write('\x1Bc')
  console.error(`${chalk.bgRed.black(' ERROR ')} Something went wrong during the build:\n`)
  if (err.name === 'AppError') {
    console.error(chalk.red(err.message))
  } else {
    console.error(err.stack)
  }
  console.log()
  process.exit(1)
}
